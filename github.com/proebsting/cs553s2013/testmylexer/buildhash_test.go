// d33dbe558d7a2e13081c73bb01ff3ce7
package testmylexer

import (
"cs553s2013/mylexer"
"github.com/proebsting/cs553s2013/lexer"
"testing"
)

func Test_d33dbe558d7a2e13081c73bb01ff3ce7_20130119144155(t *testing.T) {
c := make(chan lexer.Token, 100)
s := `<* MAIN+ *>
MODULE BuildHash;

IMPORT
In, Out,
Perfect;

CONST
numId = 256;

TYPE
HashProc = PROCEDURE (VAR str: ARRAY OF CHAR; key: LONGINT): Perfect.HashInt;

VAR
i, n, w1, w2, len, lmax: LONGINT;
list: Perfect.HashList;
d, c, p: Perfect.HashVector;
H1, H2: HashProc;
words: ARRAY numId, 32 OF CHAR;

PROCEDURE Length (VAR str: ARRAY OF CHAR): LONGINT;
VAR len: LONGINT;
BEGIN
len := 0;
WHILE str[len] # 0X DO INC(len) END;
RETURN len;
END Length;

PROCEDURE Hash1 (VAR str: ARRAY OF CHAR; key: LONGINT): Perfect.HashInt;
VAR len: LONGINT;
BEGIN
len := Length(str);
IF key < 0 THEN
INC(key, len);
IF key < 0 THEN key := 0 END;
ELSIF key >= len THEN
key := len-1;
END (*IF*);
RETURN ORD(str[key]);
END Hash1;

PROCEDURE Hash2 (VAR str: ARRAY OF CHAR; key: LONGINT): Perfect.HashInt;
VAR len: LONGINT;
BEGIN
len := Length(str);
IF key < 0 THEN
INC(key, len);
IF key < 0 THEN key := 0 END;
ELSIF key >= len THEN
key := len-1;
END (*IF*);
RETURN SHORT(ORD(str[key]) + len);
END Hash2;

PROCEDURE MakePrimaryHash (Hash1, Hash2: HashProc): BOOLEAN;
VAR
i, j: LONGINT;
hash: ARRAY numId OF LONGINT;
BEGIN
w1 := 0;
WHILE w1 < lmax DO
w2 := w1 + 1;
WHILE w2 < lmax DO
i := 0;
LOOP
IF i = n THEN
RETURN TRUE;
END (*IF*);
hash[i] := Hash1(words[i], w1) +
Hash2(words[i], w2)*65536;
FOR j := 0 TO i-1 DO
IF hash[j] = hash[i] THEN
EXIT;
END (*IF*);
END (*FOR*);
INC(i);
END (*LOOP*);
INC(w2);
END (*WHILE*);
INC(w1);
END (*WHILE*);

RETURN FALSE;
END MakePrimaryHash;

PROCEDURE MakePrimaryHash2 (Hash1, Hash2: HashProc): BOOLEAN;
VAR
i, j: LONGINT;
hash: ARRAY numId OF LONGINT;
BEGIN
w1 := -1;
WHILE -w1 <= lmax DO
w2 := w1 - 1;
WHILE -w2 <= lmax DO
i := 0;
LOOP
IF i = n THEN
RETURN TRUE;
END (*IF*);
hash[i] := Hash1(words[i], w1) +
Hash2(words[i], w2)*10000H;
FOR j := 0 TO i-1 DO
IF hash[j] = hash[i] THEN
EXIT;
END (*IF*);
END (*FOR*);
INC(i);
END (*LOOP*);
DEC(w2);
END (*WHILE*);
DEC(w1);
END (*WHILE*);

RETURN FALSE;
END MakePrimaryHash2;

BEGIN
In.Open; Out.Open;

n := 0;
LOOP
i := -1;
REPEAT
INC(i);
In.Char(words[n][i]);
UNTIL ~In.Done OR (words[n][i] = 0AX);
words[n][i] := 0X;
IF ~In.Done THEN EXIT END;
IF i # 0 THEN INC(n) END;
END (*LOOP*);

lmax := 0;
FOR i := 0 TO n-1 DO
len := Length(words[i]);
IF lmax < len THEN lmax := len END;
END (*FOR*);

Out.String("PSEUDO-CODE:");
Out.Ln();
Out.String("word w is keyword if w = kw[f(w)]");
Out.Ln();
Out.String("f(w) = d[h1] + c[h1] mod p[h2]");
Out.Ln();

IF MakePrimaryHash(Hash1, Hash1) OR MakePrimaryHash2(Hash1, Hash1) THEN
Out.String("h1 = w1 mod n");
Out.Ln();
Out.String("h2 = w2 mod m");
H1 := Hash1;
H2 := Hash1;
ELSIF MakePrimaryHash(Hash1, Hash2) OR MakePrimaryHash2(Hash1, Hash2) THEN
Out.String("h1 = w1 mod n");
Out.Ln();
Out.String("h2 = (w2 + length(w)) mod m");
H1 := Hash1;
H2 := Hash2;
ELSIF MakePrimaryHash(Hash2, Hash1) OR MakePrimaryHash2(Hash2, Hash1) THEN
Out.String("h1 = (w1 + length(w)) mod n");
Out.Ln();
Out.String("h2 = w2 mod m");
H1 := Hash2;
H2 := Hash1;
ELSIF MakePrimaryHash(Hash2, Hash2) OR MakePrimaryHash2(Hash2, Hash2) THEN
Out.String("h1 = (w1 + length(w)) mod n");
Out.Ln();
Out.String("h2 = (w2 + length(w)) mod m");
H1 := Hash2;
H2 := Hash2;
ELSE
Out.String("Can't select a primary hash :(");
HALT;
END (*IF*);

Out.Ln();
Out.String("w1 = if length(w) > ");
Out.Int(w1, 0);
Out.String(" then w[");
Out.Int(w1, 0);
Out.String("] else w[length(w)-1]");
Out.Ln();
Out.String("w2 = if length(w) > ");
Out.Int(w2, 0);
Out.String(" then w[");
Out.Int(w2, 0);
Out.String("] else w[length(w)-1]");
Out.Ln();

NEW(list, n);

FOR i := 0 TO n-1 DO
list[i].index := i;
list[i].h1 := H1(words[i], w1);
list[i].h2 := H2(words[i], w2);
END (*FOR*);

IF Perfect.MakeHash(list, d, c, p) THEN
Out.String("n = size(c) = size(d) = ");
Out.Int(LEN(c^), 0);
Out.Ln();
Out.String("m = size(p) = ");
Out.Int(LEN(p^), 0);
Out.Ln();

Out.String("kw = {");
FOR i := 0 TO n-1 DO
Out.String("");
Out.String(words[list[i].index]);
Out.String(",");
Out.Ln();
END (*FOR*);
Out.String("}");
Out.Ln();
Out.String("d = {");
FOR i := 0 TO LEN(d^)-2 DO
Out.Int(d[i], 0);
Out.String(",");
END (*FOR*);
Out.Int(d[LEN(d^)-1], 0);
Out.String("}");
Out.Ln();

Out.String("c = {");
FOR i := 0 TO LEN(c^)-2 DO
Out.Int(c[i], 0);
Out.String(",");
END (*FOR*);
Out.Int(c[LEN(c^)-1], 0);
Out.String("}");
Out.Ln();

Out.String("p = {");
FOR i := 0 TO LEN(p^)-2 DO
Out.Int(p[i], 0);
Out.String(",");
END (*FOR*);
Out.Int(p[LEN(p^)-1], 0);
Out.String("}");
Out.Ln();
ELSE
Out.String("Can't build a perfect hash function :(");
END (*IF*);
END BuildHash.
`
v := []lexer.Token{
TestToken{lexer.LESS, "<", 0, 1, 1},
TestToken{lexer.STAR, "*", 0, 1, 2},
TestToken{lexer.IDENT, "MAIN", 0, 1, 4},
TestToken{lexer.PLUS, "+", 0, 1, 8},
TestToken{lexer.STAR, "*", 0, 1, 10},
TestToken{lexer.GREATER, ">", 0, 1, 11},
TestToken{lexer.MODULE, "MODULE", 0, 2, 1},
TestToken{lexer.IDENT, "BuildHash", 0, 2, 8},
TestToken{lexer.SEMICOLON, ";", 0, 2, 17},
TestToken{lexer.IMPORT, "IMPORT", 0, 4, 1},
TestToken{lexer.IDENT, "In", 0, 5, 5},
TestToken{lexer.COMMA, ",", 0, 5, 7},
TestToken{lexer.IDENT, "Out", 0, 5, 9},
TestToken{lexer.COMMA, ",", 0, 5, 12},
TestToken{lexer.IDENT, "Perfect", 0, 6, 5},
TestToken{lexer.SEMICOLON, ";", 0, 6, 12},
TestToken{lexer.CONST, "CONST", 0, 8, 1},
TestToken{lexer.IDENT, "numId", 0, 9, 5},
TestToken{lexer.EQUAL, "=", 0, 9, 11},
TestToken{lexer.INTEGER, "256", 0, 9, 13},
TestToken{lexer.SEMICOLON, ";", 0, 9, 16},
TestToken{lexer.TYPE, "TYPE", 0, 11, 1},
TestToken{lexer.IDENT, "HashProc", 0, 12, 5},
TestToken{lexer.EQUAL, "=", 0, 12, 14},
TestToken{lexer.PROCEDURE, "PROCEDURE", 0, 12, 16},
TestToken{lexer.LPAREN, "(", 0, 12, 26},
TestToken{lexer.VAR, "VAR", 0, 12, 27},
TestToken{lexer.IDENT, "str", 0, 12, 31},
TestToken{lexer.COLON, ":", 0, 12, 34},
TestToken{lexer.ARRAY, "ARRAY", 0, 12, 36},
TestToken{lexer.OF, "OF", 0, 12, 42},
TestToken{lexer.IDENT, "CHAR", 0, 12, 45},
TestToken{lexer.SEMICOLON, ";", 0, 12, 49},
TestToken{lexer.IDENT, "key", 0, 12, 51},
TestToken{lexer.COLON, ":", 0, 12, 54},
TestToken{lexer.IDENT, "LONGINT", 0, 12, 56},
TestToken{lexer.RPAREN, ")", 0, 12, 63},
TestToken{lexer.COLON, ":", 0, 12, 64},
TestToken{lexer.IDENT, "Perfect", 0, 12, 66},
TestToken{lexer.DOT, ".", 0, 12, 73},
TestToken{lexer.IDENT, "HashInt", 0, 12, 74},
TestToken{lexer.SEMICOLON, ";", 0, 12, 81},
TestToken{lexer.VAR, "VAR", 0, 14, 1},
TestToken{lexer.IDENT, "i", 0, 15, 5},
TestToken{lexer.COMMA, ",", 0, 15, 6},
TestToken{lexer.IDENT, "n", 0, 15, 8},
TestToken{lexer.COMMA, ",", 0, 15, 9},
TestToken{lexer.IDENT, "w1", 0, 15, 11},
TestToken{lexer.COMMA, ",", 0, 15, 13},
TestToken{lexer.IDENT, "w2", 0, 15, 15},
TestToken{lexer.COMMA, ",", 0, 15, 17},
TestToken{lexer.IDENT, "len", 0, 15, 19},
TestToken{lexer.COMMA, ",", 0, 15, 22},
TestToken{lexer.IDENT, "lmax", 0, 15, 24},
TestToken{lexer.COLON, ":", 0, 15, 28},
TestToken{lexer.IDENT, "LONGINT", 0, 15, 30},
TestToken{lexer.SEMICOLON, ";", 0, 15, 37},
TestToken{lexer.IDENT, "list", 0, 16, 5},
TestToken{lexer.COLON, ":", 0, 16, 9},
TestToken{lexer.IDENT, "Perfect", 0, 16, 11},
TestToken{lexer.DOT, ".", 0, 16, 18},
TestToken{lexer.IDENT, "HashList", 0, 16, 19},
TestToken{lexer.SEMICOLON, ";", 0, 16, 27},
TestToken{lexer.IDENT, "d", 0, 17, 5},
TestToken{lexer.COMMA, ",", 0, 17, 6},
TestToken{lexer.IDENT, "c", 0, 17, 8},
TestToken{lexer.COMMA, ",", 0, 17, 9},
TestToken{lexer.IDENT, "p", 0, 17, 11},
TestToken{lexer.COLON, ":", 0, 17, 12},
TestToken{lexer.IDENT, "Perfect", 0, 17, 14},
TestToken{lexer.DOT, ".", 0, 17, 21},
TestToken{lexer.IDENT, "HashVector", 0, 17, 22},
TestToken{lexer.SEMICOLON, ";", 0, 17, 32},
TestToken{lexer.IDENT, "H1", 0, 18, 5},
TestToken{lexer.COMMA, ",", 0, 18, 7},
TestToken{lexer.IDENT, "H2", 0, 18, 9},
TestToken{lexer.COLON, ":", 0, 18, 11},
TestToken{lexer.IDENT, "HashProc", 0, 18, 13},
TestToken{lexer.SEMICOLON, ";", 0, 18, 21},
TestToken{lexer.IDENT, "words", 0, 19, 5},
TestToken{lexer.COLON, ":", 0, 19, 10},
TestToken{lexer.ARRAY, "ARRAY", 0, 19, 12},
TestToken{lexer.IDENT, "numId", 0, 19, 18},
TestToken{lexer.COMMA, ",", 0, 19, 23},
TestToken{lexer.INTEGER, "32", 0, 19, 25},
TestToken{lexer.OF, "OF", 0, 19, 28},
TestToken{lexer.IDENT, "CHAR", 0, 19, 31},
TestToken{lexer.SEMICOLON, ";", 0, 19, 35},
TestToken{lexer.PROCEDURE, "PROCEDURE", 0, 21, 1},
TestToken{lexer.IDENT, "Length", 0, 21, 11},
TestToken{lexer.LPAREN, "(", 0, 21, 18},
TestToken{lexer.VAR, "VAR", 0, 21, 19},
TestToken{lexer.IDENT, "str", 0, 21, 23},
TestToken{lexer.COLON, ":", 0, 21, 26},
TestToken{lexer.ARRAY, "ARRAY", 0, 21, 28},
TestToken{lexer.OF, "OF", 0, 21, 34},
TestToken{lexer.IDENT, "CHAR", 0, 21, 37},
TestToken{lexer.RPAREN, ")", 0, 21, 41},
TestToken{lexer.COLON, ":", 0, 21, 42},
TestToken{lexer.IDENT, "LONGINT", 0, 21, 44},
TestToken{lexer.SEMICOLON, ";", 0, 21, 51},
TestToken{lexer.VAR, "VAR", 0, 22, 1},
TestToken{lexer.IDENT, "len", 0, 22, 5},
TestToken{lexer.COLON, ":", 0, 22, 8},
TestToken{lexer.IDENT, "LONGINT", 0, 22, 10},
TestToken{lexer.SEMICOLON, ";", 0, 22, 17},
TestToken{lexer.BEGIN, "BEGIN", 0, 23, 1},
TestToken{lexer.IDENT, "len", 0, 24, 5},
TestToken{lexer.COLONEQUAL, ":=", 0, 24, 9},
TestToken{lexer.INTEGER, "0", 0, 24, 12},
TestToken{lexer.SEMICOLON, ";", 0, 24, 13},
TestToken{lexer.WHILE, "WHILE", 0, 25, 5},
TestToken{lexer.IDENT, "str", 0, 25, 11},
TestToken{lexer.LSQUARE, "[", 0, 25, 14},
TestToken{lexer.IDENT, "len", 0, 25, 15},
TestToken{lexer.RSQUARE, "]", 0, 25, 18},
TestToken{lexer.HASH, "#", 0, 25, 20},
TestToken{lexer.STRING, "0X", 0, 25, 22},
TestToken{lexer.DO, "DO", 0, 25, 25},
TestToken{lexer.IDENT, "INC", 0, 25, 28},
TestToken{lexer.LPAREN, "(", 0, 25, 31},
TestToken{lexer.IDENT, "len", 0, 25, 32},
TestToken{lexer.RPAREN, ")", 0, 25, 35},
TestToken{lexer.END, "END", 0, 25, 37},
TestToken{lexer.SEMICOLON, ";", 0, 25, 40},
TestToken{lexer.RETURN, "RETURN", 0, 26, 5},
TestToken{lexer.IDENT, "len", 0, 26, 12},
TestToken{lexer.SEMICOLON, ";", 0, 26, 15},
TestToken{lexer.END, "END", 0, 27, 1},
TestToken{lexer.IDENT, "Length", 0, 27, 5},
TestToken{lexer.SEMICOLON, ";", 0, 27, 11},
TestToken{lexer.PROCEDURE, "PROCEDURE", 0, 29, 1},
TestToken{lexer.IDENT, "Hash1", 0, 29, 11},
TestToken{lexer.LPAREN, "(", 0, 29, 17},
TestToken{lexer.VAR, "VAR", 0, 29, 18},
TestToken{lexer.IDENT, "str", 0, 29, 22},
TestToken{lexer.COLON, ":", 0, 29, 25},
TestToken{lexer.ARRAY, "ARRAY", 0, 29, 27},
TestToken{lexer.OF, "OF", 0, 29, 33},
TestToken{lexer.IDENT, "CHAR", 0, 29, 36},
TestToken{lexer.SEMICOLON, ";", 0, 29, 40},
TestToken{lexer.IDENT, "key", 0, 29, 42},
TestToken{lexer.COLON, ":", 0, 29, 45},
TestToken{lexer.IDENT, "LONGINT", 0, 29, 47},
TestToken{lexer.RPAREN, ")", 0, 29, 54},
TestToken{lexer.COLON, ":", 0, 29, 55},
TestToken{lexer.IDENT, "Perfect", 0, 29, 57},
TestToken{lexer.DOT, ".", 0, 29, 64},
TestToken{lexer.IDENT, "HashInt", 0, 29, 65},
TestToken{lexer.SEMICOLON, ";", 0, 29, 72},
TestToken{lexer.VAR, "VAR", 0, 30, 1},
TestToken{lexer.IDENT, "len", 0, 30, 5},
TestToken{lexer.COLON, ":", 0, 30, 8},
TestToken{lexer.IDENT, "LONGINT", 0, 30, 10},
TestToken{lexer.SEMICOLON, ";", 0, 30, 17},
TestToken{lexer.BEGIN, "BEGIN", 0, 31, 1},
TestToken{lexer.IDENT, "len", 0, 32, 5},
TestToken{lexer.COLONEQUAL, ":=", 0, 32, 9},
TestToken{lexer.IDENT, "Length", 0, 32, 12},
TestToken{lexer.LPAREN, "(", 0, 32, 18},
TestToken{lexer.IDENT, "str", 0, 32, 19},
TestToken{lexer.RPAREN, ")", 0, 32, 22},
TestToken{lexer.SEMICOLON, ";", 0, 32, 23},
TestToken{lexer.IF, "IF", 0, 33, 5},
TestToken{lexer.IDENT, "key", 0, 33, 8},
TestToken{lexer.LESS, "<", 0, 33, 12},
TestToken{lexer.INTEGER, "0", 0, 33, 14},
TestToken{lexer.THEN, "THEN", 0, 33, 16},
TestToken{lexer.IDENT, "INC", 0, 34, 9},
TestToken{lexer.LPAREN, "(", 0, 34, 12},
TestToken{lexer.IDENT, "key", 0, 34, 13},
TestToken{lexer.COMMA, ",", 0, 34, 16},
TestToken{lexer.IDENT, "len", 0, 34, 18},
TestToken{lexer.RPAREN, ")", 0, 34, 21},
TestToken{lexer.SEMICOLON, ";", 0, 34, 22},
TestToken{lexer.IF, "IF", 0, 35, 9},
TestToken{lexer.IDENT, "key", 0, 35, 12},
TestToken{lexer.LESS, "<", 0, 35, 16},
TestToken{lexer.INTEGER, "0", 0, 35, 18},
TestToken{lexer.THEN, "THEN", 0, 35, 20},
TestToken{lexer.IDENT, "key", 0, 35, 25},
TestToken{lexer.COLONEQUAL, ":=", 0, 35, 29},
TestToken{lexer.INTEGER, "0", 0, 35, 32},
TestToken{lexer.END, "END", 0, 35, 34},
TestToken{lexer.SEMICOLON, ";", 0, 35, 37},
TestToken{lexer.ELSIF, "ELSIF", 0, 36, 5},
TestToken{lexer.IDENT, "key", 0, 36, 11},
TestToken{lexer.GREATEREQUAL, ">=", 0, 36, 15},
TestToken{lexer.IDENT, "len", 0, 36, 18},
TestToken{lexer.THEN, "THEN", 0, 36, 22},
TestToken{lexer.IDENT, "key", 0, 37, 9},
TestToken{lexer.COLONEQUAL, ":=", 0, 37, 13},
TestToken{lexer.IDENT, "len", 0, 37, 16},
TestToken{lexer.MINUS, "-", 0, 37, 19},
TestToken{lexer.INTEGER, "1", 0, 37, 20},
TestToken{lexer.SEMICOLON, ";", 0, 37, 21},
TestToken{lexer.END, "END", 0, 38, 5},
TestToken{lexer.SEMICOLON, ";", 0, 38, 15},
TestToken{lexer.RETURN, "RETURN", 0, 39, 5},
TestToken{lexer.IDENT, "ORD", 0, 39, 12},
TestToken{lexer.LPAREN, "(", 0, 39, 15},
TestToken{lexer.IDENT, "str", 0, 39, 16},
TestToken{lexer.LSQUARE, "[", 0, 39, 19},
TestToken{lexer.IDENT, "key", 0, 39, 20},
TestToken{lexer.RSQUARE, "]", 0, 39, 23},
TestToken{lexer.RPAREN, ")", 0, 39, 24},
TestToken{lexer.SEMICOLON, ";", 0, 39, 25},
TestToken{lexer.END, "END", 0, 40, 1},
TestToken{lexer.IDENT, "Hash1", 0, 40, 5},
TestToken{lexer.SEMICOLON, ";", 0, 40, 10},
TestToken{lexer.PROCEDURE, "PROCEDURE", 0, 42, 1},
TestToken{lexer.IDENT, "Hash2", 0, 42, 11},
TestToken{lexer.LPAREN, "(", 0, 42, 17},
TestToken{lexer.VAR, "VAR", 0, 42, 18},
TestToken{lexer.IDENT, "str", 0, 42, 22},
TestToken{lexer.COLON, ":", 0, 42, 25},
TestToken{lexer.ARRAY, "ARRAY", 0, 42, 27},
TestToken{lexer.OF, "OF", 0, 42, 33},
TestToken{lexer.IDENT, "CHAR", 0, 42, 36},
TestToken{lexer.SEMICOLON, ";", 0, 42, 40},
TestToken{lexer.IDENT, "key", 0, 42, 42},
TestToken{lexer.COLON, ":", 0, 42, 45},
TestToken{lexer.IDENT, "LONGINT", 0, 42, 47},
TestToken{lexer.RPAREN, ")", 0, 42, 54},
TestToken{lexer.COLON, ":", 0, 42, 55},
TestToken{lexer.IDENT, "Perfect", 0, 42, 57},
TestToken{lexer.DOT, ".", 0, 42, 64},
TestToken{lexer.IDENT, "HashInt", 0, 42, 65},
TestToken{lexer.SEMICOLON, ";", 0, 42, 72},
TestToken{lexer.VAR, "VAR", 0, 43, 1},
TestToken{lexer.IDENT, "len", 0, 43, 5},
TestToken{lexer.COLON, ":", 0, 43, 8},
TestToken{lexer.IDENT, "LONGINT", 0, 43, 10},
TestToken{lexer.SEMICOLON, ";", 0, 43, 17},
TestToken{lexer.BEGIN, "BEGIN", 0, 44, 1},
TestToken{lexer.IDENT, "len", 0, 45, 5},
TestToken{lexer.COLONEQUAL, ":=", 0, 45, 9},
TestToken{lexer.IDENT, "Length", 0, 45, 12},
TestToken{lexer.LPAREN, "(", 0, 45, 18},
TestToken{lexer.IDENT, "str", 0, 45, 19},
TestToken{lexer.RPAREN, ")", 0, 45, 22},
TestToken{lexer.SEMICOLON, ";", 0, 45, 23},
TestToken{lexer.IF, "IF", 0, 46, 5},
TestToken{lexer.IDENT, "key", 0, 46, 8},
TestToken{lexer.LESS, "<", 0, 46, 12},
TestToken{lexer.INTEGER, "0", 0, 46, 14},
TestToken{lexer.THEN, "THEN", 0, 46, 16},
TestToken{lexer.IDENT, "INC", 0, 47, 9},
TestToken{lexer.LPAREN, "(", 0, 47, 12},
TestToken{lexer.IDENT, "key", 0, 47, 13},
TestToken{lexer.COMMA, ",", 0, 47, 16},
TestToken{lexer.IDENT, "len", 0, 47, 18},
TestToken{lexer.RPAREN, ")", 0, 47, 21},
TestToken{lexer.SEMICOLON, ";", 0, 47, 22},
TestToken{lexer.IF, "IF", 0, 48, 9},
TestToken{lexer.IDENT, "key", 0, 48, 12},
TestToken{lexer.LESS, "<", 0, 48, 16},
TestToken{lexer.INTEGER, "0", 0, 48, 18},
TestToken{lexer.THEN, "THEN", 0, 48, 20},
TestToken{lexer.IDENT, "key", 0, 48, 25},
TestToken{lexer.COLONEQUAL, ":=", 0, 48, 29},
TestToken{lexer.INTEGER, "0", 0, 48, 32},
TestToken{lexer.END, "END", 0, 48, 34},
TestToken{lexer.SEMICOLON, ";", 0, 48, 37},
TestToken{lexer.ELSIF, "ELSIF", 0, 49, 5},
TestToken{lexer.IDENT, "key", 0, 49, 11},
TestToken{lexer.GREATEREQUAL, ">=", 0, 49, 15},
TestToken{lexer.IDENT, "len", 0, 49, 18},
TestToken{lexer.THEN, "THEN", 0, 49, 22},
TestToken{lexer.IDENT, "key", 0, 50, 9},
TestToken{lexer.COLONEQUAL, ":=", 0, 50, 13},
TestToken{lexer.IDENT, "len", 0, 50, 16},
TestToken{lexer.MINUS, "-", 0, 50, 19},
TestToken{lexer.INTEGER, "1", 0, 50, 20},
TestToken{lexer.SEMICOLON, ";", 0, 50, 21},
TestToken{lexer.END, "END", 0, 51, 5},
TestToken{lexer.SEMICOLON, ";", 0, 51, 15},
TestToken{lexer.RETURN, "RETURN", 0, 52, 5},
TestToken{lexer.IDENT, "SHORT", 0, 52, 12},
TestToken{lexer.LPAREN, "(", 0, 52, 17},
TestToken{lexer.IDENT, "ORD", 0, 52, 18},
TestToken{lexer.LPAREN, "(", 0, 52, 21},
TestToken{lexer.IDENT, "str", 0, 52, 22},
TestToken{lexer.LSQUARE, "[", 0, 52, 25},
TestToken{lexer.IDENT, "key", 0, 52, 26},
TestToken{lexer.RSQUARE, "]", 0, 52, 29},
TestToken{lexer.RPAREN, ")", 0, 52, 30},
TestToken{lexer.PLUS, "+", 0, 52, 32},
TestToken{lexer.IDENT, "len", 0, 52, 34},
TestToken{lexer.RPAREN, ")", 0, 52, 37},
TestToken{lexer.SEMICOLON, ";", 0, 52, 38},
TestToken{lexer.END, "END", 0, 53, 1},
TestToken{lexer.IDENT, "Hash2", 0, 53, 5},
TestToken{lexer.SEMICOLON, ";", 0, 53, 10},
TestToken{lexer.PROCEDURE, "PROCEDURE", 0, 55, 1},
TestToken{lexer.IDENT, "MakePrimaryHash", 0, 55, 11},
TestToken{lexer.LPAREN, "(", 0, 55, 27},
TestToken{lexer.IDENT, "Hash1", 0, 55, 28},
TestToken{lexer.COMMA, ",", 0, 55, 33},
TestToken{lexer.IDENT, "Hash2", 0, 55, 35},
TestToken{lexer.COLON, ":", 0, 55, 40},
TestToken{lexer.IDENT, "HashProc", 0, 55, 42},
TestToken{lexer.RPAREN, ")", 0, 55, 50},
TestToken{lexer.COLON, ":", 0, 55, 51},
TestToken{lexer.IDENT, "BOOLEAN", 0, 55, 53},
TestToken{lexer.SEMICOLON, ";", 0, 55, 60},
TestToken{lexer.VAR, "VAR", 0, 56, 1},
TestToken{lexer.IDENT, "i", 0, 57, 5},
TestToken{lexer.COMMA, ",", 0, 57, 6},
TestToken{lexer.IDENT, "j", 0, 57, 8},
TestToken{lexer.COLON, ":", 0, 57, 9},
TestToken{lexer.IDENT, "LONGINT", 0, 57, 11},
TestToken{lexer.SEMICOLON, ";", 0, 57, 18},
TestToken{lexer.IDENT, "hash", 0, 58, 5},
TestToken{lexer.COLON, ":", 0, 58, 9},
TestToken{lexer.ARRAY, "ARRAY", 0, 58, 11},
TestToken{lexer.IDENT, "numId", 0, 58, 17},
TestToken{lexer.OF, "OF", 0, 58, 23},
TestToken{lexer.IDENT, "LONGINT", 0, 58, 26},
TestToken{lexer.SEMICOLON, ";", 0, 58, 33},
TestToken{lexer.BEGIN, "BEGIN", 0, 59, 1},
TestToken{lexer.IDENT, "w1", 0, 60, 5},
TestToken{lexer.COLONEQUAL, ":=", 0, 60, 8},
TestToken{lexer.INTEGER, "0", 0, 60, 11},
TestToken{lexer.SEMICOLON, ";", 0, 60, 12},
TestToken{lexer.WHILE, "WHILE", 0, 61, 5},
TestToken{lexer.IDENT, "w1", 0, 61, 11},
TestToken{lexer.LESS, "<", 0, 61, 14},
TestToken{lexer.IDENT, "lmax", 0, 61, 16},
TestToken{lexer.DO, "DO", 0, 61, 21},
TestToken{lexer.IDENT, "w2", 0, 62, 9},
TestToken{lexer.COLONEQUAL, ":=", 0, 62, 12},
TestToken{lexer.IDENT, "w1", 0, 62, 15},
TestToken{lexer.PLUS, "+", 0, 62, 18},
TestToken{lexer.INTEGER, "1", 0, 62, 20},
TestToken{lexer.SEMICOLON, ";", 0, 62, 21},
TestToken{lexer.WHILE, "WHILE", 0, 63, 9},
TestToken{lexer.IDENT, "w2", 0, 63, 15},
TestToken{lexer.LESS, "<", 0, 63, 18},
TestToken{lexer.IDENT, "lmax", 0, 63, 20},
TestToken{lexer.DO, "DO", 0, 63, 25},
TestToken{lexer.IDENT, "i", 0, 64, 13},
TestToken{lexer.COLONEQUAL, ":=", 0, 64, 15},
TestToken{lexer.INTEGER, "0", 0, 64, 18},
TestToken{lexer.SEMICOLON, ";", 0, 64, 19},
TestToken{lexer.IDENT, "LOOP", 0, 65, 13},
TestToken{lexer.IF, "IF", 0, 66, 17},
TestToken{lexer.IDENT, "i", 0, 66, 20},
TestToken{lexer.EQUAL, "=", 0, 66, 22},
TestToken{lexer.IDENT, "n", 0, 66, 24},
TestToken{lexer.THEN, "THEN", 0, 66, 26},
TestToken{lexer.RETURN, "RETURN", 0, 67, 21},
TestToken{lexer.TRUE, "TRUE", 0, 67, 28},
TestToken{lexer.SEMICOLON, ";", 0, 67, 32},
TestToken{lexer.END, "END", 0, 68, 17},
TestToken{lexer.SEMICOLON, ";", 0, 68, 27},
TestToken{lexer.IDENT, "hash", 0, 69, 17},
TestToken{lexer.LSQUARE, "[", 0, 69, 21},
TestToken{lexer.IDENT, "i", 0, 69, 22},
TestToken{lexer.RSQUARE, "]", 0, 69, 23},
TestToken{lexer.COLONEQUAL, ":=", 0, 69, 25},
TestToken{lexer.IDENT, "Hash1", 0, 69, 28},
TestToken{lexer.LPAREN, "(", 0, 69, 33},
TestToken{lexer.IDENT, "words", 0, 69, 34},
TestToken{lexer.LSQUARE, "[", 0, 69, 39},
TestToken{lexer.IDENT, "i", 0, 69, 40},
TestToken{lexer.RSQUARE, "]", 0, 69, 41},
TestToken{lexer.COMMA, ",", 0, 69, 42},
TestToken{lexer.IDENT, "w1", 0, 69, 44},
TestToken{lexer.RPAREN, ")", 0, 69, 46},
TestToken{lexer.PLUS, "+", 0, 69, 48},
TestToken{lexer.IDENT, "Hash2", 0, 70, 28},
TestToken{lexer.LPAREN, "(", 0, 70, 33},
TestToken{lexer.IDENT, "words", 0, 70, 34},
TestToken{lexer.LSQUARE, "[", 0, 70, 39},
TestToken{lexer.IDENT, "i", 0, 70, 40},
TestToken{lexer.RSQUARE, "]", 0, 70, 41},
TestToken{lexer.COMMA, ",", 0, 70, 42},
TestToken{lexer.IDENT, "w2", 0, 70, 44},
TestToken{lexer.RPAREN, ")", 0, 70, 46},
TestToken{lexer.STAR, "*", 0, 70, 47},
TestToken{lexer.INTEGER, "65536", 0, 70, 48},
TestToken{lexer.SEMICOLON, ";", 0, 70, 53},
TestToken{lexer.FOR, "FOR", 0, 71, 17},
TestToken{lexer.IDENT, "j", 0, 71, 21},
TestToken{lexer.COLONEQUAL, ":=", 0, 71, 23},
TestToken{lexer.INTEGER, "0", 0, 71, 26},
TestToken{lexer.TO, "TO", 0, 71, 28},
TestToken{lexer.IDENT, "i", 0, 71, 31},
TestToken{lexer.MINUS, "-", 0, 71, 32},
TestToken{lexer.INTEGER, "1", 0, 71, 33},
TestToken{lexer.DO, "DO", 0, 71, 35},
TestToken{lexer.IF, "IF", 0, 72, 21},
TestToken{lexer.IDENT, "hash", 0, 72, 24},
TestToken{lexer.LSQUARE, "[", 0, 72, 28},
TestToken{lexer.IDENT, "j", 0, 72, 29},
TestToken{lexer.RSQUARE, "]", 0, 72, 30},
TestToken{lexer.EQUAL, "=", 0, 72, 32},
TestToken{lexer.IDENT, "hash", 0, 72, 34},
TestToken{lexer.LSQUARE, "[", 0, 72, 38},
TestToken{lexer.IDENT, "i", 0, 72, 39},
TestToken{lexer.RSQUARE, "]", 0, 72, 40},
TestToken{lexer.THEN, "THEN", 0, 72, 42},
TestToken{lexer.IDENT, "EXIT", 0, 73, 25},
TestToken{lexer.SEMICOLON, ";", 0, 73, 29},
TestToken{lexer.END, "END", 0, 74, 21},
TestToken{lexer.SEMICOLON, ";", 0, 74, 31},
TestToken{lexer.END, "END", 0, 75, 17},
TestToken{lexer.SEMICOLON, ";", 0, 75, 28},
TestToken{lexer.IDENT, "INC", 0, 76, 17},
TestToken{lexer.LPAREN, "(", 0, 76, 20},
TestToken{lexer.IDENT, "i", 0, 76, 21},
TestToken{lexer.RPAREN, ")", 0, 76, 22},
TestToken{lexer.SEMICOLON, ";", 0, 76, 23},
TestToken{lexer.END, "END", 0, 77, 13},
TestToken{lexer.SEMICOLON, ";", 0, 77, 25},
TestToken{lexer.IDENT, "INC", 0, 78, 13},
TestToken{lexer.LPAREN, "(", 0, 78, 16},
TestToken{lexer.IDENT, "w2", 0, 78, 17},
TestToken{lexer.RPAREN, ")", 0, 78, 19},
TestToken{lexer.SEMICOLON, ";", 0, 78, 20},
TestToken{lexer.END, "END", 0, 79, 9},
TestToken{lexer.SEMICOLON, ";", 0, 79, 22},
TestToken{lexer.IDENT, "INC", 0, 80, 9},
TestToken{lexer.LPAREN, "(", 0, 80, 12},
TestToken{lexer.IDENT, "w1", 0, 80, 13},
TestToken{lexer.RPAREN, ")", 0, 80, 15},
TestToken{lexer.SEMICOLON, ";", 0, 80, 16},
TestToken{lexer.END, "END", 0, 81, 5},
TestToken{lexer.SEMICOLON, ";", 0, 81, 18},
TestToken{lexer.RETURN, "RETURN", 0, 83, 5},
TestToken{lexer.FALSE, "FALSE", 0, 83, 12},
TestToken{lexer.SEMICOLON, ";", 0, 83, 17},
TestToken{lexer.END, "END", 0, 84, 1},
TestToken{lexer.IDENT, "MakePrimaryHash", 0, 84, 5},
TestToken{lexer.SEMICOLON, ";", 0, 84, 20},
TestToken{lexer.PROCEDURE, "PROCEDURE", 0, 86, 1},
TestToken{lexer.IDENT, "MakePrimaryHash2", 0, 86, 11},
TestToken{lexer.LPAREN, "(", 0, 86, 28},
TestToken{lexer.IDENT, "Hash1", 0, 86, 29},
TestToken{lexer.COMMA, ",", 0, 86, 34},
TestToken{lexer.IDENT, "Hash2", 0, 86, 36},
TestToken{lexer.COLON, ":", 0, 86, 41},
TestToken{lexer.IDENT, "HashProc", 0, 86, 43},
TestToken{lexer.RPAREN, ")", 0, 86, 51},
TestToken{lexer.COLON, ":", 0, 86, 52},
TestToken{lexer.IDENT, "BOOLEAN", 0, 86, 54},
TestToken{lexer.SEMICOLON, ";", 0, 86, 61},
TestToken{lexer.VAR, "VAR", 0, 87, 1},
TestToken{lexer.IDENT, "i", 0, 88, 5},
TestToken{lexer.COMMA, ",", 0, 88, 6},
TestToken{lexer.IDENT, "j", 0, 88, 8},
TestToken{lexer.COLON, ":", 0, 88, 9},
TestToken{lexer.IDENT, "LONGINT", 0, 88, 11},
TestToken{lexer.SEMICOLON, ";", 0, 88, 18},
TestToken{lexer.IDENT, "hash", 0, 89, 5},
TestToken{lexer.COLON, ":", 0, 89, 9},
TestToken{lexer.ARRAY, "ARRAY", 0, 89, 11},
TestToken{lexer.IDENT, "numId", 0, 89, 17},
TestToken{lexer.OF, "OF", 0, 89, 23},
TestToken{lexer.IDENT, "LONGINT", 0, 89, 26},
TestToken{lexer.SEMICOLON, ";", 0, 89, 33},
TestToken{lexer.BEGIN, "BEGIN", 0, 90, 1},
TestToken{lexer.IDENT, "w1", 0, 91, 5},
TestToken{lexer.COLONEQUAL, ":=", 0, 91, 8},
TestToken{lexer.MINUS, "-", 0, 91, 11},
TestToken{lexer.INTEGER, "1", 0, 91, 12},
TestToken{lexer.SEMICOLON, ";", 0, 91, 13},
TestToken{lexer.WHILE, "WHILE", 0, 92, 5},
TestToken{lexer.MINUS, "-", 0, 92, 11},
TestToken{lexer.IDENT, "w1", 0, 92, 12},
TestToken{lexer.LESSEQUAL, "<=", 0, 92, 15},
TestToken{lexer.IDENT, "lmax", 0, 92, 18},
TestToken{lexer.DO, "DO", 0, 92, 23},
TestToken{lexer.IDENT, "w2", 0, 93, 9},
TestToken{lexer.COLONEQUAL, ":=", 0, 93, 12},
TestToken{lexer.IDENT, "w1", 0, 93, 15},
TestToken{lexer.MINUS, "-", 0, 93, 18},
TestToken{lexer.INTEGER, "1", 0, 93, 20},
TestToken{lexer.SEMICOLON, ";", 0, 93, 21},
TestToken{lexer.WHILE, "WHILE", 0, 94, 9},
TestToken{lexer.MINUS, "-", 0, 94, 15},
TestToken{lexer.IDENT, "w2", 0, 94, 16},
TestToken{lexer.LESSEQUAL, "<=", 0, 94, 19},
TestToken{lexer.IDENT, "lmax", 0, 94, 22},
TestToken{lexer.DO, "DO", 0, 94, 27},
TestToken{lexer.IDENT, "i", 0, 95, 13},
TestToken{lexer.COLONEQUAL, ":=", 0, 95, 15},
TestToken{lexer.INTEGER, "0", 0, 95, 18},
TestToken{lexer.SEMICOLON, ";", 0, 95, 19},
TestToken{lexer.IDENT, "LOOP", 0, 96, 13},
TestToken{lexer.IF, "IF", 0, 97, 17},
TestToken{lexer.IDENT, "i", 0, 97, 20},
TestToken{lexer.EQUAL, "=", 0, 97, 22},
TestToken{lexer.IDENT, "n", 0, 97, 24},
TestToken{lexer.THEN, "THEN", 0, 97, 26},
TestToken{lexer.RETURN, "RETURN", 0, 98, 21},
TestToken{lexer.TRUE, "TRUE", 0, 98, 28},
TestToken{lexer.SEMICOLON, ";", 0, 98, 32},
TestToken{lexer.END, "END", 0, 99, 17},
TestToken{lexer.SEMICOLON, ";", 0, 99, 27},
TestToken{lexer.IDENT, "hash", 0, 100, 17},
TestToken{lexer.LSQUARE, "[", 0, 100, 21},
TestToken{lexer.IDENT, "i", 0, 100, 22},
TestToken{lexer.RSQUARE, "]", 0, 100, 23},
TestToken{lexer.COLONEQUAL, ":=", 0, 100, 25},
TestToken{lexer.IDENT, "Hash1", 0, 100, 28},
TestToken{lexer.LPAREN, "(", 0, 100, 33},
TestToken{lexer.IDENT, "words", 0, 100, 34},
TestToken{lexer.LSQUARE, "[", 0, 100, 39},
TestToken{lexer.IDENT, "i", 0, 100, 40},
TestToken{lexer.RSQUARE, "]", 0, 100, 41},
TestToken{lexer.COMMA, ",", 0, 100, 42},
TestToken{lexer.IDENT, "w1", 0, 100, 44},
TestToken{lexer.RPAREN, ")", 0, 100, 46},
TestToken{lexer.PLUS, "+", 0, 100, 48},
TestToken{lexer.IDENT, "Hash2", 0, 101, 28},
TestToken{lexer.LPAREN, "(", 0, 101, 33},
TestToken{lexer.IDENT, "words", 0, 101, 34},
TestToken{lexer.LSQUARE, "[", 0, 101, 39},
TestToken{lexer.IDENT, "i", 0, 101, 40},
TestToken{lexer.RSQUARE, "]", 0, 101, 41},
TestToken{lexer.COMMA, ",", 0, 101, 42},
TestToken{lexer.IDENT, "w2", 0, 101, 44},
TestToken{lexer.RPAREN, ")", 0, 101, 46},
TestToken{lexer.STAR, "*", 0, 101, 47},
TestToken{lexer.INTEGER, "10000H", 0, 101, 48},
TestToken{lexer.SEMICOLON, ";", 0, 101, 54},
TestToken{lexer.FOR, "FOR", 0, 102, 17},
TestToken{lexer.IDENT, "j", 0, 102, 21},
TestToken{lexer.COLONEQUAL, ":=", 0, 102, 23},
TestToken{lexer.INTEGER, "0", 0, 102, 26},
TestToken{lexer.TO, "TO", 0, 102, 28},
TestToken{lexer.IDENT, "i", 0, 102, 31},
TestToken{lexer.MINUS, "-", 0, 102, 32},
TestToken{lexer.INTEGER, "1", 0, 102, 33},
TestToken{lexer.DO, "DO", 0, 102, 35},
TestToken{lexer.IF, "IF", 0, 103, 21},
TestToken{lexer.IDENT, "hash", 0, 103, 24},
TestToken{lexer.LSQUARE, "[", 0, 103, 28},
TestToken{lexer.IDENT, "j", 0, 103, 29},
TestToken{lexer.RSQUARE, "]", 0, 103, 30},
TestToken{lexer.EQUAL, "=", 0, 103, 32},
TestToken{lexer.IDENT, "hash", 0, 103, 34},
TestToken{lexer.LSQUARE, "[", 0, 103, 38},
TestToken{lexer.IDENT, "i", 0, 103, 39},
TestToken{lexer.RSQUARE, "]", 0, 103, 40},
TestToken{lexer.THEN, "THEN", 0, 103, 42},
TestToken{lexer.IDENT, "EXIT", 0, 104, 25},
TestToken{lexer.SEMICOLON, ";", 0, 104, 29},
TestToken{lexer.END, "END", 0, 105, 21},
TestToken{lexer.SEMICOLON, ";", 0, 105, 31},
TestToken{lexer.END, "END", 0, 106, 17},
TestToken{lexer.SEMICOLON, ";", 0, 106, 28},
TestToken{lexer.IDENT, "INC", 0, 107, 17},
TestToken{lexer.LPAREN, "(", 0, 107, 20},
TestToken{lexer.IDENT, "i", 0, 107, 21},
TestToken{lexer.RPAREN, ")", 0, 107, 22},
TestToken{lexer.SEMICOLON, ";", 0, 107, 23},
TestToken{lexer.END, "END", 0, 108, 13},
TestToken{lexer.SEMICOLON, ";", 0, 108, 25},
TestToken{lexer.IDENT, "DEC", 0, 109, 13},
TestToken{lexer.LPAREN, "(", 0, 109, 16},
TestToken{lexer.IDENT, "w2", 0, 109, 17},
TestToken{lexer.RPAREN, ")", 0, 109, 19},
TestToken{lexer.SEMICOLON, ";", 0, 109, 20},
TestToken{lexer.END, "END", 0, 110, 9},
TestToken{lexer.SEMICOLON, ";", 0, 110, 22},
TestToken{lexer.IDENT, "DEC", 0, 111, 9},
TestToken{lexer.LPAREN, "(", 0, 111, 12},
TestToken{lexer.IDENT, "w1", 0, 111, 13},
TestToken{lexer.RPAREN, ")", 0, 111, 15},
TestToken{lexer.SEMICOLON, ";", 0, 111, 16},
TestToken{lexer.END, "END", 0, 112, 5},
TestToken{lexer.SEMICOLON, ";", 0, 112, 18},
TestToken{lexer.RETURN, "RETURN", 0, 114, 5},
TestToken{lexer.FALSE, "FALSE", 0, 114, 12},
TestToken{lexer.SEMICOLON, ";", 0, 114, 17},
TestToken{lexer.END, "END", 0, 115, 1},
TestToken{lexer.IDENT, "MakePrimaryHash2", 0, 115, 5},
TestToken{lexer.SEMICOLON, ";", 0, 115, 21},
TestToken{lexer.BEGIN, "BEGIN", 0, 117, 1},
TestToken{lexer.IDENT, "In", 0, 118, 5},
TestToken{lexer.DOT, ".", 0, 118, 7},
TestToken{lexer.IDENT, "Open", 0, 118, 8},
TestToken{lexer.SEMICOLON, ";", 0, 118, 12},
TestToken{lexer.IDENT, "Out", 0, 118, 14},
TestToken{lexer.DOT, ".", 0, 118, 17},
TestToken{lexer.IDENT, "Open", 0, 118, 18},
TestToken{lexer.SEMICOLON, ";", 0, 118, 22},
TestToken{lexer.IDENT, "n", 0, 120, 5},
TestToken{lexer.COLONEQUAL, ":=", 0, 120, 7},
TestToken{lexer.INTEGER, "0", 0, 120, 10},
TestToken{lexer.SEMICOLON, ";", 0, 120, 11},
TestToken{lexer.IDENT, "LOOP", 0, 121, 5},
TestToken{lexer.IDENT, "i", 0, 122, 9},
TestToken{lexer.COLONEQUAL, ":=", 0, 122, 11},
TestToken{lexer.MINUS, "-", 0, 122, 14},
TestToken{lexer.INTEGER, "1", 0, 122, 15},
TestToken{lexer.SEMICOLON, ";", 0, 122, 16},
TestToken{lexer.REPEAT, "REPEAT", 0, 123, 9},
TestToken{lexer.IDENT, "INC", 0, 124, 11},
TestToken{lexer.LPAREN, "(", 0, 124, 14},
TestToken{lexer.IDENT, "i", 0, 124, 15},
TestToken{lexer.RPAREN, ")", 0, 124, 16},
TestToken{lexer.SEMICOLON, ";", 0, 124, 17},
TestToken{lexer.IDENT, "In", 0, 125, 11},
TestToken{lexer.DOT, ".", 0, 125, 13},
TestToken{lexer.IDENT, "Char", 0, 125, 14},
TestToken{lexer.LPAREN, "(", 0, 125, 18},
TestToken{lexer.IDENT, "words", 0, 125, 19},
TestToken{lexer.LSQUARE, "[", 0, 125, 24},
TestToken{lexer.IDENT, "n", 0, 125, 25},
TestToken{lexer.RSQUARE, "]", 0, 125, 26},
TestToken{lexer.LSQUARE, "[", 0, 125, 27},
TestToken{lexer.IDENT, "i", 0, 125, 28},
TestToken{lexer.RSQUARE, "]", 0, 125, 29},
TestToken{lexer.RPAREN, ")", 0, 125, 30},
TestToken{lexer.SEMICOLON, ";", 0, 125, 31},
TestToken{lexer.UNTIL, "UNTIL", 0, 126, 9},
TestToken{lexer.TILDE, "~", 0, 126, 15},
TestToken{lexer.IDENT, "In", 0, 126, 16},
TestToken{lexer.DOT, ".", 0, 126, 18},
TestToken{lexer.IDENT, "Done", 0, 126, 19},
TestToken{lexer.OR, "OR", 0, 126, 24},
TestToken{lexer.LPAREN, "(", 0, 126, 27},
TestToken{lexer.IDENT, "words", 0, 126, 28},
TestToken{lexer.LSQUARE, "[", 0, 126, 33},
TestToken{lexer.IDENT, "n", 0, 126, 34},
TestToken{lexer.RSQUARE, "]", 0, 126, 35},
TestToken{lexer.LSQUARE, "[", 0, 126, 36},
TestToken{lexer.IDENT, "i", 0, 126, 37},
TestToken{lexer.RSQUARE, "]", 0, 126, 38},
TestToken{lexer.EQUAL, "=", 0, 126, 40},
TestToken{lexer.STRING, "0AX", 0, 126, 42},
TestToken{lexer.RPAREN, ")", 0, 126, 45},
TestToken{lexer.SEMICOLON, ";", 0, 126, 46},
TestToken{lexer.IDENT, "words", 0, 127, 9},
TestToken{lexer.LSQUARE, "[", 0, 127, 14},
TestToken{lexer.IDENT, "n", 0, 127, 15},
TestToken{lexer.RSQUARE, "]", 0, 127, 16},
TestToken{lexer.LSQUARE, "[", 0, 127, 17},
TestToken{lexer.IDENT, "i", 0, 127, 18},
TestToken{lexer.RSQUARE, "]", 0, 127, 19},
TestToken{lexer.COLONEQUAL, ":=", 0, 127, 21},
TestToken{lexer.STRING, "0X", 0, 127, 24},
TestToken{lexer.SEMICOLON, ";", 0, 127, 26},
TestToken{lexer.IF, "IF", 0, 128, 9},
TestToken{lexer.TILDE, "~", 0, 128, 12},
TestToken{lexer.IDENT, "In", 0, 128, 13},
TestToken{lexer.DOT, ".", 0, 128, 15},
TestToken{lexer.IDENT, "Done", 0, 128, 16},
TestToken{lexer.THEN, "THEN", 0, 128, 21},
TestToken{lexer.IDENT, "EXIT", 0, 128, 26},
TestToken{lexer.END, "END", 0, 128, 31},
TestToken{lexer.SEMICOLON, ";", 0, 128, 34},
TestToken{lexer.IF, "IF", 0, 129, 9},
TestToken{lexer.IDENT, "i", 0, 129, 12},
TestToken{lexer.HASH, "#", 0, 129, 14},
TestToken{lexer.INTEGER, "0", 0, 129, 16},
TestToken{lexer.THEN, "THEN", 0, 129, 18},
TestToken{lexer.IDENT, "INC", 0, 129, 23},
TestToken{lexer.LPAREN, "(", 0, 129, 26},
TestToken{lexer.IDENT, "n", 0, 129, 27},
TestToken{lexer.RPAREN, ")", 0, 129, 28},
TestToken{lexer.END, "END", 0, 129, 30},
TestToken{lexer.SEMICOLON, ";", 0, 129, 33},
TestToken{lexer.END, "END", 0, 130, 5},
TestToken{lexer.SEMICOLON, ";", 0, 130, 17},
TestToken{lexer.IDENT, "lmax", 0, 132, 5},
TestToken{lexer.COLONEQUAL, ":=", 0, 132, 10},
TestToken{lexer.INTEGER, "0", 0, 132, 13},
TestToken{lexer.SEMICOLON, ";", 0, 132, 14},
TestToken{lexer.FOR, "FOR", 0, 133, 5},
TestToken{lexer.IDENT, "i", 0, 133, 9},
TestToken{lexer.COLONEQUAL, ":=", 0, 133, 11},
TestToken{lexer.INTEGER, "0", 0, 133, 14},
TestToken{lexer.TO, "TO", 0, 133, 16},
TestToken{lexer.IDENT, "n", 0, 133, 19},
TestToken{lexer.MINUS, "-", 0, 133, 20},
TestToken{lexer.INTEGER, "1", 0, 133, 21},
TestToken{lexer.DO, "DO", 0, 133, 23},
TestToken{lexer.IDENT, "len", 0, 134, 9},
TestToken{lexer.COLONEQUAL, ":=", 0, 134, 13},
TestToken{lexer.IDENT, "Length", 0, 134, 16},
TestToken{lexer.LPAREN, "(", 0, 134, 22},
TestToken{lexer.IDENT, "words", 0, 134, 23},
TestToken{lexer.LSQUARE, "[", 0, 134, 28},
TestToken{lexer.IDENT, "i", 0, 134, 29},
TestToken{lexer.RSQUARE, "]", 0, 134, 30},
TestToken{lexer.RPAREN, ")", 0, 134, 31},
TestToken{lexer.SEMICOLON, ";", 0, 134, 32},
TestToken{lexer.IF, "IF", 0, 135, 9},
TestToken{lexer.IDENT, "lmax", 0, 135, 12},
TestToken{lexer.LESS, "<", 0, 135, 17},
TestToken{lexer.IDENT, "len", 0, 135, 19},
TestToken{lexer.THEN, "THEN", 0, 135, 23},
TestToken{lexer.IDENT, "lmax", 0, 135, 28},
TestToken{lexer.COLONEQUAL, ":=", 0, 135, 33},
TestToken{lexer.IDENT, "len", 0, 135, 36},
TestToken{lexer.END, "END", 0, 135, 40},
TestToken{lexer.SEMICOLON, ";", 0, 135, 43},
TestToken{lexer.END, "END", 0, 136, 5},
TestToken{lexer.SEMICOLON, ";", 0, 136, 16},
TestToken{lexer.IDENT, "Out", 0, 138, 5},
TestToken{lexer.DOT, ".", 0, 138, 8},
TestToken{lexer.IDENT, "String", 0, 138, 9},
TestToken{lexer.LPAREN, "(", 0, 138, 15},
TestToken{lexer.STRING, "\"PSEUDO-CODE:\"", 0, 138, 16},
TestToken{lexer.RPAREN, ")", 0, 138, 30},
TestToken{lexer.SEMICOLON, ";", 0, 138, 31},
TestToken{lexer.IDENT, "Out", 0, 139, 5},
TestToken{lexer.DOT, ".", 0, 139, 8},
TestToken{lexer.IDENT, "Ln", 0, 139, 9},
TestToken{lexer.LPAREN, "(", 0, 139, 11},
TestToken{lexer.RPAREN, ")", 0, 139, 12},
TestToken{lexer.SEMICOLON, ";", 0, 139, 13},
TestToken{lexer.IDENT, "Out", 0, 140, 5},
TestToken{lexer.DOT, ".", 0, 140, 8},
TestToken{lexer.IDENT, "String", 0, 140, 9},
TestToken{lexer.LPAREN, "(", 0, 140, 15},
TestToken{lexer.STRING, "\"word w is keyword if w = kw[f(w)]\"", 0, 140, 16},
TestToken{lexer.RPAREN, ")", 0, 140, 51},
TestToken{lexer.SEMICOLON, ";", 0, 140, 52},
TestToken{lexer.IDENT, "Out", 0, 141, 5},
TestToken{lexer.DOT, ".", 0, 141, 8},
TestToken{lexer.IDENT, "Ln", 0, 141, 9},
TestToken{lexer.LPAREN, "(", 0, 141, 11},
TestToken{lexer.RPAREN, ")", 0, 141, 12},
TestToken{lexer.SEMICOLON, ";", 0, 141, 13},
TestToken{lexer.IDENT, "Out", 0, 142, 5},
TestToken{lexer.DOT, ".", 0, 142, 8},
TestToken{lexer.IDENT, "String", 0, 142, 9},
TestToken{lexer.LPAREN, "(", 0, 142, 15},
TestToken{lexer.STRING, "\"f(w) = d[h1] + c[h1] mod p[h2]\"", 0, 142, 16},
TestToken{lexer.RPAREN, ")", 0, 142, 48},
TestToken{lexer.SEMICOLON, ";", 0, 142, 49},
TestToken{lexer.IDENT, "Out", 0, 143, 5},
TestToken{lexer.DOT, ".", 0, 143, 8},
TestToken{lexer.IDENT, "Ln", 0, 143, 9},
TestToken{lexer.LPAREN, "(", 0, 143, 11},
TestToken{lexer.RPAREN, ")", 0, 143, 12},
TestToken{lexer.SEMICOLON, ";", 0, 143, 13},
TestToken{lexer.IF, "IF", 0, 145, 5},
TestToken{lexer.IDENT, "MakePrimaryHash", 0, 145, 8},
TestToken{lexer.LPAREN, "(", 0, 145, 23},
TestToken{lexer.IDENT, "Hash1", 0, 145, 24},
TestToken{lexer.COMMA, ",", 0, 145, 29},
TestToken{lexer.IDENT, "Hash1", 0, 145, 31},
TestToken{lexer.RPAREN, ")", 0, 145, 36},
TestToken{lexer.OR, "OR", 0, 145, 38},
TestToken{lexer.IDENT, "MakePrimaryHash2", 0, 145, 41},
TestToken{lexer.LPAREN, "(", 0, 145, 57},
TestToken{lexer.IDENT, "Hash1", 0, 145, 58},
TestToken{lexer.COMMA, ",", 0, 145, 63},
TestToken{lexer.IDENT, "Hash1", 0, 145, 65},
TestToken{lexer.RPAREN, ")", 0, 145, 70},
TestToken{lexer.THEN, "THEN", 0, 145, 72},
TestToken{lexer.IDENT, "Out", 0, 146, 9},
TestToken{lexer.DOT, ".", 0, 146, 12},
TestToken{lexer.IDENT, "String", 0, 146, 13},
TestToken{lexer.LPAREN, "(", 0, 146, 19},
TestToken{lexer.STRING, "\"h1 = w1 mod n\"", 0, 146, 20},
TestToken{lexer.RPAREN, ")", 0, 146, 35},
TestToken{lexer.SEMICOLON, ";", 0, 146, 36},
TestToken{lexer.IDENT, "Out", 0, 147, 9},
TestToken{lexer.DOT, ".", 0, 147, 12},
TestToken{lexer.IDENT, "Ln", 0, 147, 13},
TestToken{lexer.LPAREN, "(", 0, 147, 15},
TestToken{lexer.RPAREN, ")", 0, 147, 16},
TestToken{lexer.SEMICOLON, ";", 0, 147, 17},
TestToken{lexer.IDENT, "Out", 0, 148, 9},
TestToken{lexer.DOT, ".", 0, 148, 12},
TestToken{lexer.IDENT, "String", 0, 148, 13},
TestToken{lexer.LPAREN, "(", 0, 148, 19},
TestToken{lexer.STRING, "\"h2 = w2 mod m\"", 0, 148, 20},
TestToken{lexer.RPAREN, ")", 0, 148, 35},
TestToken{lexer.SEMICOLON, ";", 0, 148, 36},
TestToken{lexer.IDENT, "H1", 0, 149, 9},
TestToken{lexer.COLONEQUAL, ":=", 0, 149, 12},
TestToken{lexer.IDENT, "Hash1", 0, 149, 15},
TestToken{lexer.SEMICOLON, ";", 0, 149, 20},
TestToken{lexer.IDENT, "H2", 0, 150, 9},
TestToken{lexer.COLONEQUAL, ":=", 0, 150, 12},
TestToken{lexer.IDENT, "Hash1", 0, 150, 15},
TestToken{lexer.SEMICOLON, ";", 0, 150, 20},
TestToken{lexer.ELSIF, "ELSIF", 0, 151, 5},
TestToken{lexer.IDENT, "MakePrimaryHash", 0, 151, 11},
TestToken{lexer.LPAREN, "(", 0, 151, 26},
TestToken{lexer.IDENT, "Hash1", 0, 151, 27},
TestToken{lexer.COMMA, ",", 0, 151, 32},
TestToken{lexer.IDENT, "Hash2", 0, 151, 34},
TestToken{lexer.RPAREN, ")", 0, 151, 39},
TestToken{lexer.OR, "OR", 0, 151, 41},
TestToken{lexer.IDENT, "MakePrimaryHash2", 0, 151, 44},
TestToken{lexer.LPAREN, "(", 0, 151, 60},
TestToken{lexer.IDENT, "Hash1", 0, 151, 61},
TestToken{lexer.COMMA, ",", 0, 151, 66},
TestToken{lexer.IDENT, "Hash2", 0, 151, 68},
TestToken{lexer.RPAREN, ")", 0, 151, 73},
TestToken{lexer.THEN, "THEN", 0, 151, 75},
TestToken{lexer.IDENT, "Out", 0, 152, 9},
TestToken{lexer.DOT, ".", 0, 152, 12},
TestToken{lexer.IDENT, "String", 0, 152, 13},
TestToken{lexer.LPAREN, "(", 0, 152, 19},
TestToken{lexer.STRING, "\"h1 = w1 mod n\"", 0, 152, 20},
TestToken{lexer.RPAREN, ")", 0, 152, 35},
TestToken{lexer.SEMICOLON, ";", 0, 152, 36},
TestToken{lexer.IDENT, "Out", 0, 153, 9},
TestToken{lexer.DOT, ".", 0, 153, 12},
TestToken{lexer.IDENT, "Ln", 0, 153, 13},
TestToken{lexer.LPAREN, "(", 0, 153, 15},
TestToken{lexer.RPAREN, ")", 0, 153, 16},
TestToken{lexer.SEMICOLON, ";", 0, 153, 17},
TestToken{lexer.IDENT, "Out", 0, 154, 9},
TestToken{lexer.DOT, ".", 0, 154, 12},
TestToken{lexer.IDENT, "String", 0, 154, 13},
TestToken{lexer.LPAREN, "(", 0, 154, 19},
TestToken{lexer.STRING, "\"h2 = (w2 + length(w)) mod m\"", 0, 154, 20},
TestToken{lexer.RPAREN, ")", 0, 154, 49},
TestToken{lexer.SEMICOLON, ";", 0, 154, 50},
TestToken{lexer.IDENT, "H1", 0, 155, 9},
TestToken{lexer.COLONEQUAL, ":=", 0, 155, 12},
TestToken{lexer.IDENT, "Hash1", 0, 155, 15},
TestToken{lexer.SEMICOLON, ";", 0, 155, 20},
TestToken{lexer.IDENT, "H2", 0, 156, 9},
TestToken{lexer.COLONEQUAL, ":=", 0, 156, 12},
TestToken{lexer.IDENT, "Hash2", 0, 156, 15},
TestToken{lexer.SEMICOLON, ";", 0, 156, 20},
TestToken{lexer.ELSIF, "ELSIF", 0, 157, 5},
TestToken{lexer.IDENT, "MakePrimaryHash", 0, 157, 11},
TestToken{lexer.LPAREN, "(", 0, 157, 26},
TestToken{lexer.IDENT, "Hash2", 0, 157, 27},
TestToken{lexer.COMMA, ",", 0, 157, 32},
TestToken{lexer.IDENT, "Hash1", 0, 157, 34},
TestToken{lexer.RPAREN, ")", 0, 157, 39},
TestToken{lexer.OR, "OR", 0, 157, 41},
TestToken{lexer.IDENT, "MakePrimaryHash2", 0, 157, 44},
TestToken{lexer.LPAREN, "(", 0, 157, 60},
TestToken{lexer.IDENT, "Hash2", 0, 157, 61},
TestToken{lexer.COMMA, ",", 0, 157, 66},
TestToken{lexer.IDENT, "Hash1", 0, 157, 68},
TestToken{lexer.RPAREN, ")", 0, 157, 73},
TestToken{lexer.THEN, "THEN", 0, 157, 75},
TestToken{lexer.IDENT, "Out", 0, 158, 9},
TestToken{lexer.DOT, ".", 0, 158, 12},
TestToken{lexer.IDENT, "String", 0, 158, 13},
TestToken{lexer.LPAREN, "(", 0, 158, 19},
TestToken{lexer.STRING, "\"h1 = (w1 + length(w)) mod n\"", 0, 158, 20},
TestToken{lexer.RPAREN, ")", 0, 158, 49},
TestToken{lexer.SEMICOLON, ";", 0, 158, 50},
TestToken{lexer.IDENT, "Out", 0, 159, 9},
TestToken{lexer.DOT, ".", 0, 159, 12},
TestToken{lexer.IDENT, "Ln", 0, 159, 13},
TestToken{lexer.LPAREN, "(", 0, 159, 15},
TestToken{lexer.RPAREN, ")", 0, 159, 16},
TestToken{lexer.SEMICOLON, ";", 0, 159, 17},
TestToken{lexer.IDENT, "Out", 0, 160, 9},
TestToken{lexer.DOT, ".", 0, 160, 12},
TestToken{lexer.IDENT, "String", 0, 160, 13},
TestToken{lexer.LPAREN, "(", 0, 160, 19},
TestToken{lexer.STRING, "\"h2 = w2 mod m\"", 0, 160, 20},
TestToken{lexer.RPAREN, ")", 0, 160, 35},
TestToken{lexer.SEMICOLON, ";", 0, 160, 36},
TestToken{lexer.IDENT, "H1", 0, 161, 9},
TestToken{lexer.COLONEQUAL, ":=", 0, 161, 12},
TestToken{lexer.IDENT, "Hash2", 0, 161, 15},
TestToken{lexer.SEMICOLON, ";", 0, 161, 20},
TestToken{lexer.IDENT, "H2", 0, 162, 9},
TestToken{lexer.COLONEQUAL, ":=", 0, 162, 12},
TestToken{lexer.IDENT, "Hash1", 0, 162, 15},
TestToken{lexer.SEMICOLON, ";", 0, 162, 20},
TestToken{lexer.ELSIF, "ELSIF", 0, 163, 5},
TestToken{lexer.IDENT, "MakePrimaryHash", 0, 163, 11},
TestToken{lexer.LPAREN, "(", 0, 163, 26},
TestToken{lexer.IDENT, "Hash2", 0, 163, 27},
TestToken{lexer.COMMA, ",", 0, 163, 32},
TestToken{lexer.IDENT, "Hash2", 0, 163, 34},
TestToken{lexer.RPAREN, ")", 0, 163, 39},
TestToken{lexer.OR, "OR", 0, 163, 41},
TestToken{lexer.IDENT, "MakePrimaryHash2", 0, 163, 44},
TestToken{lexer.LPAREN, "(", 0, 163, 60},
TestToken{lexer.IDENT, "Hash2", 0, 163, 61},
TestToken{lexer.COMMA, ",", 0, 163, 66},
TestToken{lexer.IDENT, "Hash2", 0, 163, 68},
TestToken{lexer.RPAREN, ")", 0, 163, 73},
TestToken{lexer.THEN, "THEN", 0, 163, 75},
TestToken{lexer.IDENT, "Out", 0, 164, 9},
TestToken{lexer.DOT, ".", 0, 164, 12},
TestToken{lexer.IDENT, "String", 0, 164, 13},
TestToken{lexer.LPAREN, "(", 0, 164, 19},
TestToken{lexer.STRING, "\"h1 = (w1 + length(w)) mod n\"", 0, 164, 20},
TestToken{lexer.RPAREN, ")", 0, 164, 49},
TestToken{lexer.SEMICOLON, ";", 0, 164, 50},
TestToken{lexer.IDENT, "Out", 0, 165, 9},
TestToken{lexer.DOT, ".", 0, 165, 12},
TestToken{lexer.IDENT, "Ln", 0, 165, 13},
TestToken{lexer.LPAREN, "(", 0, 165, 15},
TestToken{lexer.RPAREN, ")", 0, 165, 16},
TestToken{lexer.SEMICOLON, ";", 0, 165, 17},
TestToken{lexer.IDENT, "Out", 0, 166, 9},
TestToken{lexer.DOT, ".", 0, 166, 12},
TestToken{lexer.IDENT, "String", 0, 166, 13},
TestToken{lexer.LPAREN, "(", 0, 166, 19},
TestToken{lexer.STRING, "\"h2 = (w2 + length(w)) mod m\"", 0, 166, 20},
TestToken{lexer.RPAREN, ")", 0, 166, 49},
TestToken{lexer.SEMICOLON, ";", 0, 166, 50},
TestToken{lexer.IDENT, "H1", 0, 167, 9},
TestToken{lexer.COLONEQUAL, ":=", 0, 167, 12},
TestToken{lexer.IDENT, "Hash2", 0, 167, 15},
TestToken{lexer.SEMICOLON, ";", 0, 167, 20},
TestToken{lexer.IDENT, "H2", 0, 168, 9},
TestToken{lexer.COLONEQUAL, ":=", 0, 168, 12},
TestToken{lexer.IDENT, "Hash2", 0, 168, 15},
TestToken{lexer.SEMICOLON, ";", 0, 168, 20},
TestToken{lexer.ELSE, "ELSE", 0, 169, 5},
TestToken{lexer.IDENT, "Out", 0, 170, 9},
TestToken{lexer.DOT, ".", 0, 170, 12},
TestToken{lexer.IDENT, "String", 0, 170, 13},
TestToken{lexer.LPAREN, "(", 0, 170, 19},
TestToken{lexer.STRING, "\"Can't select a primary hash :(\"", 0, 170, 20},
TestToken{lexer.RPAREN, ")", 0, 170, 52},
TestToken{lexer.SEMICOLON, ";", 0, 170, 53},
TestToken{lexer.IDENT, "HALT", 0, 171, 9},
TestToken{lexer.SEMICOLON, ";", 0, 171, 13},
TestToken{lexer.END, "END", 0, 172, 5},
TestToken{lexer.SEMICOLON, ";", 0, 172, 15},
TestToken{lexer.IDENT, "Out", 0, 174, 5},
TestToken{lexer.DOT, ".", 0, 174, 8},
TestToken{lexer.IDENT, "Ln", 0, 174, 9},
TestToken{lexer.LPAREN, "(", 0, 174, 11},
TestToken{lexer.RPAREN, ")", 0, 174, 12},
TestToken{lexer.SEMICOLON, ";", 0, 174, 13},
TestToken{lexer.IDENT, "Out", 0, 175, 5},
TestToken{lexer.DOT, ".", 0, 175, 8},
TestToken{lexer.IDENT, "String", 0, 175, 9},
TestToken{lexer.LPAREN, "(", 0, 175, 15},
TestToken{lexer.STRING, "\"w1 = if length(w) > \"", 0, 175, 16},
TestToken{lexer.RPAREN, ")", 0, 175, 38},
TestToken{lexer.SEMICOLON, ";", 0, 175, 39},
TestToken{lexer.IDENT, "Out", 0, 176, 5},
TestToken{lexer.DOT, ".", 0, 176, 8},
TestToken{lexer.IDENT, "Int", 0, 176, 9},
TestToken{lexer.LPAREN, "(", 0, 176, 12},
TestToken{lexer.IDENT, "w1", 0, 176, 13},
TestToken{lexer.COMMA, ",", 0, 176, 15},
TestToken{lexer.INTEGER, "0", 0, 176, 17},
TestToken{lexer.RPAREN, ")", 0, 176, 18},
TestToken{lexer.SEMICOLON, ";", 0, 176, 19},
TestToken{lexer.IDENT, "Out", 0, 177, 5},
TestToken{lexer.DOT, ".", 0, 177, 8},
TestToken{lexer.IDENT, "String", 0, 177, 9},
TestToken{lexer.LPAREN, "(", 0, 177, 15},
TestToken{lexer.STRING, "\" then w[\"", 0, 177, 16},
TestToken{lexer.RPAREN, ")", 0, 177, 26},
TestToken{lexer.SEMICOLON, ";", 0, 177, 27},
TestToken{lexer.IDENT, "Out", 0, 178, 5},
TestToken{lexer.DOT, ".", 0, 178, 8},
TestToken{lexer.IDENT, "Int", 0, 178, 9},
TestToken{lexer.LPAREN, "(", 0, 178, 12},
TestToken{lexer.IDENT, "w1", 0, 178, 13},
TestToken{lexer.COMMA, ",", 0, 178, 15},
TestToken{lexer.INTEGER, "0", 0, 178, 17},
TestToken{lexer.RPAREN, ")", 0, 178, 18},
TestToken{lexer.SEMICOLON, ";", 0, 178, 19},
TestToken{lexer.IDENT, "Out", 0, 179, 5},
TestToken{lexer.DOT, ".", 0, 179, 8},
TestToken{lexer.IDENT, "String", 0, 179, 9},
TestToken{lexer.LPAREN, "(", 0, 179, 15},
TestToken{lexer.STRING, "\"] else w[length(w)-1]\"", 0, 179, 16},
TestToken{lexer.RPAREN, ")", 0, 179, 39},
TestToken{lexer.SEMICOLON, ";", 0, 179, 40},
TestToken{lexer.IDENT, "Out", 0, 180, 5},
TestToken{lexer.DOT, ".", 0, 180, 8},
TestToken{lexer.IDENT, "Ln", 0, 180, 9},
TestToken{lexer.LPAREN, "(", 0, 180, 11},
TestToken{lexer.RPAREN, ")", 0, 180, 12},
TestToken{lexer.SEMICOLON, ";", 0, 180, 13},
TestToken{lexer.IDENT, "Out", 0, 181, 5},
TestToken{lexer.DOT, ".", 0, 181, 8},
TestToken{lexer.IDENT, "String", 0, 181, 9},
TestToken{lexer.LPAREN, "(", 0, 181, 15},
TestToken{lexer.STRING, "\"w2 = if length(w) > \"", 0, 181, 16},
TestToken{lexer.RPAREN, ")", 0, 181, 38},
TestToken{lexer.SEMICOLON, ";", 0, 181, 39},
TestToken{lexer.IDENT, "Out", 0, 182, 5},
TestToken{lexer.DOT, ".", 0, 182, 8},
TestToken{lexer.IDENT, "Int", 0, 182, 9},
TestToken{lexer.LPAREN, "(", 0, 182, 12},
TestToken{lexer.IDENT, "w2", 0, 182, 13},
TestToken{lexer.COMMA, ",", 0, 182, 15},
TestToken{lexer.INTEGER, "0", 0, 182, 17},
TestToken{lexer.RPAREN, ")", 0, 182, 18},
TestToken{lexer.SEMICOLON, ";", 0, 182, 19},
TestToken{lexer.IDENT, "Out", 0, 183, 5},
TestToken{lexer.DOT, ".", 0, 183, 8},
TestToken{lexer.IDENT, "String", 0, 183, 9},
TestToken{lexer.LPAREN, "(", 0, 183, 15},
TestToken{lexer.STRING, "\" then w[\"", 0, 183, 16},
TestToken{lexer.RPAREN, ")", 0, 183, 26},
TestToken{lexer.SEMICOLON, ";", 0, 183, 27},
TestToken{lexer.IDENT, "Out", 0, 184, 5},
TestToken{lexer.DOT, ".", 0, 184, 8},
TestToken{lexer.IDENT, "Int", 0, 184, 9},
TestToken{lexer.LPAREN, "(", 0, 184, 12},
TestToken{lexer.IDENT, "w2", 0, 184, 13},
TestToken{lexer.COMMA, ",", 0, 184, 15},
TestToken{lexer.INTEGER, "0", 0, 184, 17},
TestToken{lexer.RPAREN, ")", 0, 184, 18},
TestToken{lexer.SEMICOLON, ";", 0, 184, 19},
TestToken{lexer.IDENT, "Out", 0, 185, 5},
TestToken{lexer.DOT, ".", 0, 185, 8},
TestToken{lexer.IDENT, "String", 0, 185, 9},
TestToken{lexer.LPAREN, "(", 0, 185, 15},
TestToken{lexer.STRING, "\"] else w[length(w)-1]\"", 0, 185, 16},
TestToken{lexer.RPAREN, ")", 0, 185, 39},
TestToken{lexer.SEMICOLON, ";", 0, 185, 40},
TestToken{lexer.IDENT, "Out", 0, 186, 5},
TestToken{lexer.DOT, ".", 0, 186, 8},
TestToken{lexer.IDENT, "Ln", 0, 186, 9},
TestToken{lexer.LPAREN, "(", 0, 186, 11},
TestToken{lexer.RPAREN, ")", 0, 186, 12},
TestToken{lexer.SEMICOLON, ";", 0, 186, 13},
TestToken{lexer.IDENT, "NEW", 0, 188, 5},
TestToken{lexer.LPAREN, "(", 0, 188, 8},
TestToken{lexer.IDENT, "list", 0, 188, 9},
TestToken{lexer.COMMA, ",", 0, 188, 13},
TestToken{lexer.IDENT, "n", 0, 188, 15},
TestToken{lexer.RPAREN, ")", 0, 188, 16},
TestToken{lexer.SEMICOLON, ";", 0, 188, 17},
TestToken{lexer.FOR, "FOR", 0, 190, 5},
TestToken{lexer.IDENT, "i", 0, 190, 9},
TestToken{lexer.COLONEQUAL, ":=", 0, 190, 11},
TestToken{lexer.INTEGER, "0", 0, 190, 14},
TestToken{lexer.TO, "TO", 0, 190, 16},
TestToken{lexer.IDENT, "n", 0, 190, 19},
TestToken{lexer.MINUS, "-", 0, 190, 20},
TestToken{lexer.INTEGER, "1", 0, 190, 21},
TestToken{lexer.DO, "DO", 0, 190, 23},
TestToken{lexer.IDENT, "list", 0, 191, 9},
TestToken{lexer.LSQUARE, "[", 0, 191, 13},
TestToken{lexer.IDENT, "i", 0, 191, 14},
TestToken{lexer.RSQUARE, "]", 0, 191, 15},
TestToken{lexer.DOT, ".", 0, 191, 16},
TestToken{lexer.IDENT, "index", 0, 191, 17},
TestToken{lexer.COLONEQUAL, ":=", 0, 191, 23},
TestToken{lexer.IDENT, "i", 0, 191, 26},
TestToken{lexer.SEMICOLON, ";", 0, 191, 27},
TestToken{lexer.IDENT, "list", 0, 192, 9},
TestToken{lexer.LSQUARE, "[", 0, 192, 13},
TestToken{lexer.IDENT, "i", 0, 192, 14},
TestToken{lexer.RSQUARE, "]", 0, 192, 15},
TestToken{lexer.DOT, ".", 0, 192, 16},
TestToken{lexer.IDENT, "h1", 0, 192, 17},
TestToken{lexer.COLONEQUAL, ":=", 0, 192, 20},
TestToken{lexer.IDENT, "H1", 0, 192, 23},
TestToken{lexer.LPAREN, "(", 0, 192, 25},
TestToken{lexer.IDENT, "words", 0, 192, 26},
TestToken{lexer.LSQUARE, "[", 0, 192, 31},
TestToken{lexer.IDENT, "i", 0, 192, 32},
TestToken{lexer.RSQUARE, "]", 0, 192, 33},
TestToken{lexer.COMMA, ",", 0, 192, 34},
TestToken{lexer.IDENT, "w1", 0, 192, 36},
TestToken{lexer.RPAREN, ")", 0, 192, 38},
TestToken{lexer.SEMICOLON, ";", 0, 192, 39},
TestToken{lexer.IDENT, "list", 0, 193, 9},
TestToken{lexer.LSQUARE, "[", 0, 193, 13},
TestToken{lexer.IDENT, "i", 0, 193, 14},
TestToken{lexer.RSQUARE, "]", 0, 193, 15},
TestToken{lexer.DOT, ".", 0, 193, 16},
TestToken{lexer.IDENT, "h2", 0, 193, 17},
TestToken{lexer.COLONEQUAL, ":=", 0, 193, 20},
TestToken{lexer.IDENT, "H2", 0, 193, 23},
TestToken{lexer.LPAREN, "(", 0, 193, 25},
TestToken{lexer.IDENT, "words", 0, 193, 26},
TestToken{lexer.LSQUARE, "[", 0, 193, 31},
TestToken{lexer.IDENT, "i", 0, 193, 32},
TestToken{lexer.RSQUARE, "]", 0, 193, 33},
TestToken{lexer.COMMA, ",", 0, 193, 34},
TestToken{lexer.IDENT, "w2", 0, 193, 36},
TestToken{lexer.RPAREN, ")", 0, 193, 38},
TestToken{lexer.SEMICOLON, ";", 0, 193, 39},
TestToken{lexer.END, "END", 0, 194, 5},
TestToken{lexer.SEMICOLON, ";", 0, 194, 16},
TestToken{lexer.IF, "IF", 0, 196, 5},
TestToken{lexer.IDENT, "Perfect", 0, 196, 8},
TestToken{lexer.DOT, ".", 0, 196, 15},
TestToken{lexer.IDENT, "MakeHash", 0, 196, 16},
TestToken{lexer.LPAREN, "(", 0, 196, 24},
TestToken{lexer.IDENT, "list", 0, 196, 25},
TestToken{lexer.COMMA, ",", 0, 196, 29},
TestToken{lexer.IDENT, "d", 0, 196, 31},
TestToken{lexer.COMMA, ",", 0, 196, 32},
TestToken{lexer.IDENT, "c", 0, 196, 34},
TestToken{lexer.COMMA, ",", 0, 196, 35},
TestToken{lexer.IDENT, "p", 0, 196, 37},
TestToken{lexer.RPAREN, ")", 0, 196, 38},
TestToken{lexer.THEN, "THEN", 0, 196, 40},
TestToken{lexer.IDENT, "Out", 0, 197, 9},
TestToken{lexer.DOT, ".", 0, 197, 12},
TestToken{lexer.IDENT, "String", 0, 197, 13},
TestToken{lexer.LPAREN, "(", 0, 197, 19},
TestToken{lexer.STRING, "\"n = size(c) = size(d) = \"", 0, 197, 20},
TestToken{lexer.RPAREN, ")", 0, 197, 46},
TestToken{lexer.SEMICOLON, ";", 0, 197, 47},
TestToken{lexer.IDENT, "Out", 0, 198, 9},
TestToken{lexer.DOT, ".", 0, 198, 12},
TestToken{lexer.IDENT, "Int", 0, 198, 13},
TestToken{lexer.LPAREN, "(", 0, 198, 16},
TestToken{lexer.IDENT, "LEN", 0, 198, 17},
TestToken{lexer.LPAREN, "(", 0, 198, 20},
TestToken{lexer.IDENT, "c", 0, 198, 21},
TestToken{lexer.CARAT, "^", 0, 198, 22},
TestToken{lexer.RPAREN, ")", 0, 198, 23},
TestToken{lexer.COMMA, ",", 0, 198, 24},
TestToken{lexer.INTEGER, "0", 0, 198, 26},
TestToken{lexer.RPAREN, ")", 0, 198, 27},
TestToken{lexer.SEMICOLON, ";", 0, 198, 28},
TestToken{lexer.IDENT, "Out", 0, 199, 9},
TestToken{lexer.DOT, ".", 0, 199, 12},
TestToken{lexer.IDENT, "Ln", 0, 199, 13},
TestToken{lexer.LPAREN, "(", 0, 199, 15},
TestToken{lexer.RPAREN, ")", 0, 199, 16},
TestToken{lexer.SEMICOLON, ";", 0, 199, 17},
TestToken{lexer.IDENT, "Out", 0, 200, 9},
TestToken{lexer.DOT, ".", 0, 200, 12},
TestToken{lexer.IDENT, "String", 0, 200, 13},
TestToken{lexer.LPAREN, "(", 0, 200, 19},
TestToken{lexer.STRING, "\"m = size(p) = \"", 0, 200, 20},
TestToken{lexer.RPAREN, ")", 0, 200, 36},
TestToken{lexer.SEMICOLON, ";", 0, 200, 37},
TestToken{lexer.IDENT, "Out", 0, 201, 9},
TestToken{lexer.DOT, ".", 0, 201, 12},
TestToken{lexer.IDENT, "Int", 0, 201, 13},
TestToken{lexer.LPAREN, "(", 0, 201, 16},
TestToken{lexer.IDENT, "LEN", 0, 201, 17},
TestToken{lexer.LPAREN, "(", 0, 201, 20},
TestToken{lexer.IDENT, "p", 0, 201, 21},
TestToken{lexer.CARAT, "^", 0, 201, 22},
TestToken{lexer.RPAREN, ")", 0, 201, 23},
TestToken{lexer.COMMA, ",", 0, 201, 24},
TestToken{lexer.INTEGER, "0", 0, 201, 26},
TestToken{lexer.RPAREN, ")", 0, 201, 27},
TestToken{lexer.SEMICOLON, ";", 0, 201, 28},
TestToken{lexer.IDENT, "Out", 0, 202, 9},
TestToken{lexer.DOT, ".", 0, 202, 12},
TestToken{lexer.IDENT, "Ln", 0, 202, 13},
TestToken{lexer.LPAREN, "(", 0, 202, 15},
TestToken{lexer.RPAREN, ")", 0, 202, 16},
TestToken{lexer.SEMICOLON, ";", 0, 202, 17},
TestToken{lexer.IDENT, "Out", 0, 204, 9},
TestToken{lexer.DOT, ".", 0, 204, 12},
TestToken{lexer.IDENT, "String", 0, 204, 13},
TestToken{lexer.LPAREN, "(", 0, 204, 19},
TestToken{lexer.STRING, "\"kw = {\"", 0, 204, 20},
TestToken{lexer.RPAREN, ")", 0, 204, 28},
TestToken{lexer.SEMICOLON, ";", 0, 204, 29},
TestToken{lexer.FOR, "FOR", 0, 205, 9},
TestToken{lexer.IDENT, "i", 0, 205, 13},
TestToken{lexer.COLONEQUAL, ":=", 0, 205, 15},
TestToken{lexer.INTEGER, "0", 0, 205, 18},
TestToken{lexer.TO, "TO", 0, 205, 20},
TestToken{lexer.IDENT, "n", 0, 205, 23},
TestToken{lexer.MINUS, "-", 0, 205, 24},
TestToken{lexer.INTEGER, "1", 0, 205, 25},
TestToken{lexer.DO, "DO", 0, 205, 27},
TestToken{lexer.IDENT, "Out", 0, 206, 13},
TestToken{lexer.DOT, ".", 0, 206, 16},
TestToken{lexer.IDENT, "String", 0, 206, 17},
TestToken{lexer.LPAREN, "(", 0, 206, 23},
TestToken{lexer.STRING, "\"\"", 0, 206, 24},
TestToken{lexer.RPAREN, ")", 0, 206, 26},
TestToken{lexer.SEMICOLON, ";", 0, 206, 27},
TestToken{lexer.IDENT, "Out", 0, 207, 13},
TestToken{lexer.DOT, ".", 0, 207, 16},
TestToken{lexer.IDENT, "String", 0, 207, 17},
TestToken{lexer.LPAREN, "(", 0, 207, 23},
TestToken{lexer.IDENT, "words", 0, 207, 24},
TestToken{lexer.LSQUARE, "[", 0, 207, 29},
TestToken{lexer.IDENT, "list", 0, 207, 30},
TestToken{lexer.LSQUARE, "[", 0, 207, 34},
TestToken{lexer.IDENT, "i", 0, 207, 35},
TestToken{lexer.RSQUARE, "]", 0, 207, 36},
TestToken{lexer.DOT, ".", 0, 207, 37},
TestToken{lexer.IDENT, "index", 0, 207, 38},
TestToken{lexer.RSQUARE, "]", 0, 207, 43},
TestToken{lexer.RPAREN, ")", 0, 207, 44},
TestToken{lexer.SEMICOLON, ";", 0, 207, 45},
TestToken{lexer.IDENT, "Out", 0, 208, 13},
TestToken{lexer.DOT, ".", 0, 208, 16},
TestToken{lexer.IDENT, "String", 0, 208, 17},
TestToken{lexer.LPAREN, "(", 0, 208, 23},
TestToken{lexer.STRING, "\",\"", 0, 208, 24},
TestToken{lexer.RPAREN, ")", 0, 208, 27},
TestToken{lexer.SEMICOLON, ";", 0, 208, 28},
TestToken{lexer.IDENT, "Out", 0, 209, 13},
TestToken{lexer.DOT, ".", 0, 209, 16},
TestToken{lexer.IDENT, "Ln", 0, 209, 17},
TestToken{lexer.LPAREN, "(", 0, 209, 19},
TestToken{lexer.RPAREN, ")", 0, 209, 20},
TestToken{lexer.SEMICOLON, ";", 0, 209, 21},
TestToken{lexer.END, "END", 0, 210, 9},
TestToken{lexer.SEMICOLON, ";", 0, 210, 20},
TestToken{lexer.IDENT, "Out", 0, 211, 9},
TestToken{lexer.DOT, ".", 0, 211, 12},
TestToken{lexer.IDENT, "String", 0, 211, 13},
TestToken{lexer.LPAREN, "(", 0, 211, 19},
TestToken{lexer.STRING, "\"}\"", 0, 211, 20},
TestToken{lexer.RPAREN, ")", 0, 211, 23},
TestToken{lexer.SEMICOLON, ";", 0, 211, 24},
TestToken{lexer.IDENT, "Out", 0, 212, 9},
TestToken{lexer.DOT, ".", 0, 212, 12},
TestToken{lexer.IDENT, "Ln", 0, 212, 13},
TestToken{lexer.LPAREN, "(", 0, 212, 15},
TestToken{lexer.RPAREN, ")", 0, 212, 16},
TestToken{lexer.SEMICOLON, ";", 0, 212, 17},
TestToken{lexer.IDENT, "Out", 0, 214, 9},
TestToken{lexer.DOT, ".", 0, 214, 12},
TestToken{lexer.IDENT, "String", 0, 214, 13},
TestToken{lexer.LPAREN, "(", 0, 214, 19},
TestToken{lexer.STRING, "\"d = {\"", 0, 214, 20},
TestToken{lexer.RPAREN, ")", 0, 214, 27},
TestToken{lexer.SEMICOLON, ";", 0, 214, 28},
TestToken{lexer.FOR, "FOR", 0, 215, 9},
TestToken{lexer.IDENT, "i", 0, 215, 13},
TestToken{lexer.COLONEQUAL, ":=", 0, 215, 15},
TestToken{lexer.INTEGER, "0", 0, 215, 18},
TestToken{lexer.TO, "TO", 0, 215, 20},
TestToken{lexer.IDENT, "LEN", 0, 215, 23},
TestToken{lexer.LPAREN, "(", 0, 215, 26},
TestToken{lexer.IDENT, "d", 0, 215, 27},
TestToken{lexer.CARAT, "^", 0, 215, 28},
TestToken{lexer.RPAREN, ")", 0, 215, 29},
TestToken{lexer.MINUS, "-", 0, 215, 30},
TestToken{lexer.INTEGER, "2", 0, 215, 31},
TestToken{lexer.DO, "DO", 0, 215, 33},
TestToken{lexer.IDENT, "Out", 0, 216, 13},
TestToken{lexer.DOT, ".", 0, 216, 16},
TestToken{lexer.IDENT, "Int", 0, 216, 17},
TestToken{lexer.LPAREN, "(", 0, 216, 20},
TestToken{lexer.IDENT, "d", 0, 216, 21},
TestToken{lexer.LSQUARE, "[", 0, 216, 22},
TestToken{lexer.IDENT, "i", 0, 216, 23},
TestToken{lexer.RSQUARE, "]", 0, 216, 24},
TestToken{lexer.COMMA, ",", 0, 216, 25},
TestToken{lexer.INTEGER, "0", 0, 216, 27},
TestToken{lexer.RPAREN, ")", 0, 216, 28},
TestToken{lexer.SEMICOLON, ";", 0, 216, 29},
TestToken{lexer.IDENT, "Out", 0, 217, 13},
TestToken{lexer.DOT, ".", 0, 217, 16},
TestToken{lexer.IDENT, "String", 0, 217, 17},
TestToken{lexer.LPAREN, "(", 0, 217, 23},
TestToken{lexer.STRING, "\",\"", 0, 217, 24},
TestToken{lexer.RPAREN, ")", 0, 217, 27},
TestToken{lexer.SEMICOLON, ";", 0, 217, 28},
TestToken{lexer.END, "END", 0, 218, 9},
TestToken{lexer.SEMICOLON, ";", 0, 218, 20},
TestToken{lexer.IDENT, "Out", 0, 219, 9},
TestToken{lexer.DOT, ".", 0, 219, 12},
TestToken{lexer.IDENT, "Int", 0, 219, 13},
TestToken{lexer.LPAREN, "(", 0, 219, 16},
TestToken{lexer.IDENT, "d", 0, 219, 17},
TestToken{lexer.LSQUARE, "[", 0, 219, 18},
TestToken{lexer.IDENT, "LEN", 0, 219, 19},
TestToken{lexer.LPAREN, "(", 0, 219, 22},
TestToken{lexer.IDENT, "d", 0, 219, 23},
TestToken{lexer.CARAT, "^", 0, 219, 24},
TestToken{lexer.RPAREN, ")", 0, 219, 25},
TestToken{lexer.MINUS, "-", 0, 219, 26},
TestToken{lexer.INTEGER, "1", 0, 219, 27},
TestToken{lexer.RSQUARE, "]", 0, 219, 28},
TestToken{lexer.COMMA, ",", 0, 219, 29},
TestToken{lexer.INTEGER, "0", 0, 219, 31},
TestToken{lexer.RPAREN, ")", 0, 219, 32},
TestToken{lexer.SEMICOLON, ";", 0, 219, 33},
TestToken{lexer.IDENT, "Out", 0, 220, 9},
TestToken{lexer.DOT, ".", 0, 220, 12},
TestToken{lexer.IDENT, "String", 0, 220, 13},
TestToken{lexer.LPAREN, "(", 0, 220, 19},
TestToken{lexer.STRING, "\"}\"", 0, 220, 20},
TestToken{lexer.RPAREN, ")", 0, 220, 23},
TestToken{lexer.SEMICOLON, ";", 0, 220, 24},
TestToken{lexer.IDENT, "Out", 0, 221, 9},
TestToken{lexer.DOT, ".", 0, 221, 12},
TestToken{lexer.IDENT, "Ln", 0, 221, 13},
TestToken{lexer.LPAREN, "(", 0, 221, 15},
TestToken{lexer.RPAREN, ")", 0, 221, 16},
TestToken{lexer.SEMICOLON, ";", 0, 221, 17},
TestToken{lexer.IDENT, "Out", 0, 223, 9},
TestToken{lexer.DOT, ".", 0, 223, 12},
TestToken{lexer.IDENT, "String", 0, 223, 13},
TestToken{lexer.LPAREN, "(", 0, 223, 19},
TestToken{lexer.STRING, "\"c = {\"", 0, 223, 20},
TestToken{lexer.RPAREN, ")", 0, 223, 27},
TestToken{lexer.SEMICOLON, ";", 0, 223, 28},
TestToken{lexer.FOR, "FOR", 0, 224, 9},
TestToken{lexer.IDENT, "i", 0, 224, 13},
TestToken{lexer.COLONEQUAL, ":=", 0, 224, 15},
TestToken{lexer.INTEGER, "0", 0, 224, 18},
TestToken{lexer.TO, "TO", 0, 224, 20},
TestToken{lexer.IDENT, "LEN", 0, 224, 23},
TestToken{lexer.LPAREN, "(", 0, 224, 26},
TestToken{lexer.IDENT, "c", 0, 224, 27},
TestToken{lexer.CARAT, "^", 0, 224, 28},
TestToken{lexer.RPAREN, ")", 0, 224, 29},
TestToken{lexer.MINUS, "-", 0, 224, 30},
TestToken{lexer.INTEGER, "2", 0, 224, 31},
TestToken{lexer.DO, "DO", 0, 224, 33},
TestToken{lexer.IDENT, "Out", 0, 225, 13},
TestToken{lexer.DOT, ".", 0, 225, 16},
TestToken{lexer.IDENT, "Int", 0, 225, 17},
TestToken{lexer.LPAREN, "(", 0, 225, 20},
TestToken{lexer.IDENT, "c", 0, 225, 21},
TestToken{lexer.LSQUARE, "[", 0, 225, 22},
TestToken{lexer.IDENT, "i", 0, 225, 23},
TestToken{lexer.RSQUARE, "]", 0, 225, 24},
TestToken{lexer.COMMA, ",", 0, 225, 25},
TestToken{lexer.INTEGER, "0", 0, 225, 27},
TestToken{lexer.RPAREN, ")", 0, 225, 28},
TestToken{lexer.SEMICOLON, ";", 0, 225, 29},
TestToken{lexer.IDENT, "Out", 0, 226, 13},
TestToken{lexer.DOT, ".", 0, 226, 16},
TestToken{lexer.IDENT, "String", 0, 226, 17},
TestToken{lexer.LPAREN, "(", 0, 226, 23},
TestToken{lexer.STRING, "\",\"", 0, 226, 24},
TestToken{lexer.RPAREN, ")", 0, 226, 27},
TestToken{lexer.SEMICOLON, ";", 0, 226, 28},
TestToken{lexer.END, "END", 0, 227, 9},
TestToken{lexer.SEMICOLON, ";", 0, 227, 20},
TestToken{lexer.IDENT, "Out", 0, 228, 9},
TestToken{lexer.DOT, ".", 0, 228, 12},
TestToken{lexer.IDENT, "Int", 0, 228, 13},
TestToken{lexer.LPAREN, "(", 0, 228, 16},
TestToken{lexer.IDENT, "c", 0, 228, 17},
TestToken{lexer.LSQUARE, "[", 0, 228, 18},
TestToken{lexer.IDENT, "LEN", 0, 228, 19},
TestToken{lexer.LPAREN, "(", 0, 228, 22},
TestToken{lexer.IDENT, "c", 0, 228, 23},
TestToken{lexer.CARAT, "^", 0, 228, 24},
TestToken{lexer.RPAREN, ")", 0, 228, 25},
TestToken{lexer.MINUS, "-", 0, 228, 26},
TestToken{lexer.INTEGER, "1", 0, 228, 27},
TestToken{lexer.RSQUARE, "]", 0, 228, 28},
TestToken{lexer.COMMA, ",", 0, 228, 29},
TestToken{lexer.INTEGER, "0", 0, 228, 31},
TestToken{lexer.RPAREN, ")", 0, 228, 32},
TestToken{lexer.SEMICOLON, ";", 0, 228, 33},
TestToken{lexer.IDENT, "Out", 0, 229, 9},
TestToken{lexer.DOT, ".", 0, 229, 12},
TestToken{lexer.IDENT, "String", 0, 229, 13},
TestToken{lexer.LPAREN, "(", 0, 229, 19},
TestToken{lexer.STRING, "\"}\"", 0, 229, 20},
TestToken{lexer.RPAREN, ")", 0, 229, 23},
TestToken{lexer.SEMICOLON, ";", 0, 229, 24},
TestToken{lexer.IDENT, "Out", 0, 230, 9},
TestToken{lexer.DOT, ".", 0, 230, 12},
TestToken{lexer.IDENT, "Ln", 0, 230, 13},
TestToken{lexer.LPAREN, "(", 0, 230, 15},
TestToken{lexer.RPAREN, ")", 0, 230, 16},
TestToken{lexer.SEMICOLON, ";", 0, 230, 17},
TestToken{lexer.IDENT, "Out", 0, 232, 9},
TestToken{lexer.DOT, ".", 0, 232, 12},
TestToken{lexer.IDENT, "String", 0, 232, 13},
TestToken{lexer.LPAREN, "(", 0, 232, 19},
TestToken{lexer.STRING, "\"p = {\"", 0, 232, 20},
TestToken{lexer.RPAREN, ")", 0, 232, 27},
TestToken{lexer.SEMICOLON, ";", 0, 232, 28},
TestToken{lexer.FOR, "FOR", 0, 233, 9},
TestToken{lexer.IDENT, "i", 0, 233, 13},
TestToken{lexer.COLONEQUAL, ":=", 0, 233, 15},
TestToken{lexer.INTEGER, "0", 0, 233, 18},
TestToken{lexer.TO, "TO", 0, 233, 20},
TestToken{lexer.IDENT, "LEN", 0, 233, 23},
TestToken{lexer.LPAREN, "(", 0, 233, 26},
TestToken{lexer.IDENT, "p", 0, 233, 27},
TestToken{lexer.CARAT, "^", 0, 233, 28},
TestToken{lexer.RPAREN, ")", 0, 233, 29},
TestToken{lexer.MINUS, "-", 0, 233, 30},
TestToken{lexer.INTEGER, "2", 0, 233, 31},
TestToken{lexer.DO, "DO", 0, 233, 33},
TestToken{lexer.IDENT, "Out", 0, 234, 13},
TestToken{lexer.DOT, ".", 0, 234, 16},
TestToken{lexer.IDENT, "Int", 0, 234, 17},
TestToken{lexer.LPAREN, "(", 0, 234, 20},
TestToken{lexer.IDENT, "p", 0, 234, 21},
TestToken{lexer.LSQUARE, "[", 0, 234, 22},
TestToken{lexer.IDENT, "i", 0, 234, 23},
TestToken{lexer.RSQUARE, "]", 0, 234, 24},
TestToken{lexer.COMMA, ",", 0, 234, 25},
TestToken{lexer.INTEGER, "0", 0, 234, 27},
TestToken{lexer.RPAREN, ")", 0, 234, 28},
TestToken{lexer.SEMICOLON, ";", 0, 234, 29},
TestToken{lexer.IDENT, "Out", 0, 235, 13},
TestToken{lexer.DOT, ".", 0, 235, 16},
TestToken{lexer.IDENT, "String", 0, 235, 17},
TestToken{lexer.LPAREN, "(", 0, 235, 23},
TestToken{lexer.STRING, "\",\"", 0, 235, 24},
TestToken{lexer.RPAREN, ")", 0, 235, 27},
TestToken{lexer.SEMICOLON, ";", 0, 235, 28},
TestToken{lexer.END, "END", 0, 236, 9},
TestToken{lexer.SEMICOLON, ";", 0, 236, 20},
TestToken{lexer.IDENT, "Out", 0, 237, 9},
TestToken{lexer.DOT, ".", 0, 237, 12},
TestToken{lexer.IDENT, "Int", 0, 237, 13},
TestToken{lexer.LPAREN, "(", 0, 237, 16},
TestToken{lexer.IDENT, "p", 0, 237, 17},
TestToken{lexer.LSQUARE, "[", 0, 237, 18},
TestToken{lexer.IDENT, "LEN", 0, 237, 19},
TestToken{lexer.LPAREN, "(", 0, 237, 22},
TestToken{lexer.IDENT, "p", 0, 237, 23},
TestToken{lexer.CARAT, "^", 0, 237, 24},
TestToken{lexer.RPAREN, ")", 0, 237, 25},
TestToken{lexer.MINUS, "-", 0, 237, 26},
TestToken{lexer.INTEGER, "1", 0, 237, 27},
TestToken{lexer.RSQUARE, "]", 0, 237, 28},
TestToken{lexer.COMMA, ",", 0, 237, 29},
TestToken{lexer.INTEGER, "0", 0, 237, 31},
TestToken{lexer.RPAREN, ")", 0, 237, 32},
TestToken{lexer.SEMICOLON, ";", 0, 237, 33},
TestToken{lexer.IDENT, "Out", 0, 238, 9},
TestToken{lexer.DOT, ".", 0, 238, 12},
TestToken{lexer.IDENT, "String", 0, 238, 13},
TestToken{lexer.LPAREN, "(", 0, 238, 19},
TestToken{lexer.STRING, "\"}\"", 0, 238, 20},
TestToken{lexer.RPAREN, ")", 0, 238, 23},
TestToken{lexer.SEMICOLON, ";", 0, 238, 24},
TestToken{lexer.IDENT, "Out", 0, 239, 9},
TestToken{lexer.DOT, ".", 0, 239, 12},
TestToken{lexer.IDENT, "Ln", 0, 239, 13},
TestToken{lexer.LPAREN, "(", 0, 239, 15},
TestToken{lexer.RPAREN, ")", 0, 239, 16},
TestToken{lexer.SEMICOLON, ";", 0, 239, 17},
TestToken{lexer.ELSE, "ELSE", 0, 240, 5},
TestToken{lexer.IDENT, "Out", 0, 241, 9},
TestToken{lexer.DOT, ".", 0, 241, 12},
TestToken{lexer.IDENT, "String", 0, 241, 13},
TestToken{lexer.LPAREN, "(", 0, 241, 19},
TestToken{lexer.STRING, "\"Can't build a perfect hash function :(\"", 0, 241, 20},
TestToken{lexer.RPAREN, ")", 0, 241, 60},
TestToken{lexer.SEMICOLON, ";", 0, 241, 61},
TestToken{lexer.END, "END", 0, 242, 5},
TestToken{lexer.SEMICOLON, ";", 0, 242, 15},
TestToken{lexer.END, "END", 0, 243, 1},
TestToken{lexer.IDENT, "BuildHash", 0, 243, 5},
TestToken{lexer.DOT, ".", 0, 243, 14},
TestToken{lexer.EOF, "<EOF>", 0, 244, 1},
}
go mylexer.Lexer(s, c)
lexer.CheckTest(s, c, v, t)
}
